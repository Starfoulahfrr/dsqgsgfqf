from handlers.admin_features import AdminFeatures
from modules.access_manager import AccessManager
import json
import base64
import logging
import asyncio
import shutil
import os
import re
from datetime import datetime, time
import pytz
from telegram.error import NetworkError, TimedOut, RetryAfter
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, 
    CommandHandler, 
    CallbackQueryHandler, 
    MessageHandler, 
    filters, 
    ContextTypes, 
    ConversationHandler
)
paris_tz = pytz.timezone('Europe/Paris')

STATS_CACHE = None
LAST_CACHE_UPDATE = None
admin_features = None
CATALOG_FILE = 'config/catalog.json'
# D√©sactiver les logs de httpx
logging.getLogger("httpx").setLevel(logging.WARNING)

# Configuration du logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Charger la configuration
try:
    with open('config/config.json', 'r', encoding='utf-8') as f:
        CONFIG = json.load(f)
        TOKEN = CONFIG['token']
        ADMIN_IDS = CONFIG['admin_ids']
except FileNotFoundError:
    print("Erreur: Le fichier config.json n'a pas √©t√© trouv√©!")
    exit(1)
except KeyError as e:
    print(f"Erreur: La cl√© {e} est manquante dans le fichier config.json!")
    exit(1)

# Fonctions de gestion du catalogue
def load_catalog():
    """Charge le catalogue depuis le fichier JSON"""
    try:
        with open(CATALOG_FILE, 'r', encoding='utf-8') as f:
            catalog = json.load(f)
            return catalog
    except FileNotFoundError:
        print(f"Fichier catalogue non trouv√© dans {CATALOG_FILE}, cr√©ation d'un nouveau catalogue")
        return {'stats': {'total_views': 0, 'category_views': {}, 'product_views': {}, 
                'last_updated': datetime.now().strftime('%H:%M:%S'),
                'last_reset': datetime.now().strftime('%Y-%m-%d')}}
    except Exception as e:
        print(f"Erreur lors du chargement du catalogue: {e}")
        return {}

def save_catalog(catalog):
    """Sauvegarde le catalogue dans le fichier JSON"""
    try:
        # Assurer que le dossier config existe
        os.makedirs(os.path.dirname(CATALOG_FILE), exist_ok=True)
        
        with open(CATALOG_FILE, 'w', encoding='utf-8') as f:
            json.dump(catalog, f, indent=4, ensure_ascii=False)
        
    except Exception as e:
        print(f"Erreur lors de la sauvegarde du catalogue : {e}")

def encode_for_callback(text):
    """Encode le texte pour le callback_data de mani√®re s√©curis√©e"""
    try:
        # Limiter la longueur du callback_data en utilisant un hash court
        safe_id = str(abs(hash(text)) % 10000)
        return safe_id
    except Exception as e:
        return str(abs(hash(str(text))) % 10000)

def decode_from_callback(safe_id, context):
    """D√©code le texte du callback_data"""
    try:
        # R√©cup√©rer la valeur originale depuis le context
        return context.user_data.get(f'callback_{safe_id}')
    except Exception as e:
        return None

def clean_stats():
    """Nettoie les statistiques des produits et cat√©gories qui n'existent plus"""
    if 'stats' not in CATALOG:
        return
    
    stats = CATALOG['stats']
    
    # Nettoyer les vues par cat√©gorie
    if 'category_views' in stats:
        categories_to_remove = []
        for category in stats['category_views']:
            if category not in CATALOG or category == 'stats':
                categories_to_remove.append(category)
        
        for category in categories_to_remove:
            del stats['category_views'][category]
            print(f"üßπ Suppression des stats de la cat√©gorie: {category}")

    # Nettoyer les vues par produit
    if 'product_views' in stats:
        categories_to_remove = []
        for category in stats['product_views']:
            if category not in CATALOG or category == 'stats':
                categories_to_remove.append(category)
                continue
            
            products_to_remove = []
            existing_products = [p['name'] for p in CATALOG[category]]
            
            for product_name in stats['product_views'][category]:
                if product_name not in existing_products:
                    products_to_remove.append(product_name)
            
            # Supprimer les produits qui n'existent plus
            for product in products_to_remove:
                del stats['product_views'][category][product]
                print(f"üßπ Suppression des stats du produit: {product} dans {category}")
            
            # Si la cat√©gorie est vide apr√®s nettoyage, la marquer pour suppression
            if not stats['product_views'][category]:
                categories_to_remove.append(category)
        
        # Supprimer les cat√©gories vides
        for category in categories_to_remove:
            if category in stats['product_views']:
                del stats['product_views'][category]

    # Mettre √† jour la date de derni√®re modification
    stats['last_updated'] = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
    save_catalog(CATALOG)

def get_stats():
    global STATS_CACHE, LAST_CACHE_UPDATE
    current_time = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
    
    # Si le cache existe et a moins de 30 secondes
    if STATS_CACHE and LAST_CACHE_UPDATE and (current_time - LAST_CACHE_UPDATE).seconds < 30:
        return STATS_CACHE
        
    # Sinon, lire le fichier et mettre √† jour le cache
    STATS_CACHE = load_catalog()['stats']
    LAST_CACHE_UPDATE = current_time
    return STATS_CACHE

def backup_data():
    """Cr√©e une sauvegarde des fichiers de donn√©es"""
    backup_dir = "backups"
    if not os.path.exists(backup_dir):
        os.makedirs(backup_dir)
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # Backup config.json
    if os.path.exists("config/config.json"):
        shutil.copy2("config/config.json", f"{backup_dir}/config_{timestamp}.json")
    
    # Backup catalog.json
    if os.path.exists("config/catalog.json"):
        shutil.copy2("config/catalog.json", f"{backup_dir}/catalog_{timestamp}.json")

def is_category_sold_out(catalog, category):
    """V√©rifie si une cat√©gorie est en SOLD OUT"""
    if category not in catalog:
        return False
    return (len(catalog[category]) == 1 and 
            isinstance(catalog[category][0], dict) and 
            catalog[category][0].get('name') == 'SOLD OUT ! ‚ùå')

def print_catalog_debug():
    """Fonction de debug pour afficher le contenu du catalogue"""
    for category, products in CATALOG.items():
        if category != 'stats':
            print(f"\nCat√©gorie: {category}")
            for product in products:
                print(f"  Produit: {product['name']}")
                if 'media' in product:
                    print(f"    M√©dias ({len(product['media'])}): {product['media']}")

# √âtats de conversation
WAITING_FOR_ACCESS_CODE = "WAITING_FOR_ACCESS_CODE"
CHOOSING = "CHOOSING"
WAITING_CATEGORY_NAME = "WAITING_CATEGORY_NAME"
WAITING_PRODUCT_NAME = "WAITING_PRODUCT_NAME"
WAITING_PRODUCT_PRICE = "WAITING_PRODUCT_PRICE"
WAITING_PRODUCT_DESCRIPTION = "WAITING_PRODUCT_DESCRIPTION"
WAITING_PRODUCT_MEDIA = "WAITING_PRODUCT_MEDIA"
SELECTING_CATEGORY = "SELECTING_CATEGORY"
SELECTING_CATEGORY_TO_DELETE = "SELECTING_CATEGORY_TO_DELETE"
SELECTING_PRODUCT_TO_DELETE = "SELECTING_PRODUCT_TO_DELETE"
WAITING_CONTACT_USERNAME = "WAITING_CONTACT_USERNAME"
SELECTING_PRODUCT_TO_EDIT = "SELECTING_PRODUCT_TO_EDIT"
EDITING_PRODUCT_FIELD = "EDITING_PRODUCT_FIELD"
WAITING_NEW_VALUE = "WAITING_NEW_VALUE"
WAITING_BANNER_IMAGE = "WAITING_BANNER_IMAGE"
WAITING_BROADCAST_MESSAGE = "WAITING_BROADCAST_MESSAGE"
WAITING_ORDER_BUTTON_CONFIG = "WAITING_ORDER_BUTTON_CONFIG"
WAITING_WELCOME_MESSAGE = "WAITING_WELCOME_MESSAGE"  # Ajout de cette ligne
EDITING_CATEGORY = "EDITING_CATEGORY"
WAITING_NEW_CATEGORY_NAME = "WAITING_NEW_CATEGORY_NAME"
WAITING_BUTTON_NAME = "WAITING_BUTTON_NAME"
WAITING_BUTTON_VALUE = "WAITING_BUTTON_VALUE"
WAITING_BROADCAST_EDIT = "WAITING_BROADCAST_EDIT"
WAITING_GROUP_NAME = "WAITING_GROUP_NAME"
WAITING_GROUP_USER = "WAITING_GROUP_USER"
WAITING_POLL_QUESTION = "WAITING_POLL_QUESTION"
WAITING_POLL_OPTIONS = "WAITING_POLL_OPTIONS"

# Charger le catalogue au d√©marrage
CATALOG = load_catalog()

# Fonctions de base

async def handle_access_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """G√®re la v√©rification du code d'acc√®s"""
    user_id = update.effective_user.id
    code = update.message.text.strip()
    chat_id = update.effective_chat.id
    
    try:
        # Supprimer le message de l'utilisateur contenant le code
        await update.message.delete()
    except Exception as e:
        pass

    is_valid, reason = access_manager.verify_code(code, user_id)
    
    if is_valid:
        try:
            # Supprimer tous les messages pr√©c√©dents dans le chat (y compris le message de bienvenue)
            current_message_id = update.message.message_id
            
            # Supprimer les 15 derniers messages pour s'assurer que tout est nettoy√©
            for i in range(current_message_id - 15, current_message_id + 1):
                try:
                    await context.bot.delete_message(chat_id=chat_id, message_id=i)
                except Exception as e:
                    pass  # Ignorer silencieusement les erreurs de suppression
                    
            # S'assurer que le message de bienvenue initial est supprim√©
            if 'initial_welcome_message_id' in context.user_data:
                try:
                    await context.bot.delete_message(
                        chat_id=chat_id,
                        message_id=context.user_data['initial_welcome_message_id']
                    )
                except Exception as e:
                    pass
                
            # Nettoyer les donn√©es stock√©es
            context.user_data.clear()  # Nettoyer toutes les donn√©es stock√©es
            
        except Exception as e:
            pass  # Ignorer silencieusement les erreurs
        
        # Redirection vers le menu principal sans messages suppl√©mentaires
        return await start(update, context)
    else:
        # G√©rer le code invalide avec une popup au lieu d'un message
        error_messages = {
            "expired": "‚ùå Ce code a expir√©",
            "invalid": "‚ùå Code invalide",
        }
        
        try:
            await update.message.reply_text(
                text=error_messages.get(reason, "Code invalide"),
                reply_markup=None
            )
        except Exception as e:
            pass
            
        return WAITING_FOR_ACCESS_CODE

async def admin_generate_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """G√©n√®re un nouveau code d'acc√®s (commande admin)"""
    if str(update.effective_user.id) not in ADMIN_IDS:
        await update.message.reply_text("‚ùå Cette commande est r√©serv√©e aux administrateurs.")
        return

    code, expiration = access_manager.generate_code(update.effective_user.id)
    
    # Formater l'expiration
    exp_date = datetime.fromisoformat(expiration)
    exp_str = exp_date.strftime("%d/%m/%Y %H:%M")
    
    await update.message.reply_text(
        f"‚úÖ Nouveau code g√©n√©r√© :\n\n"
        f"Code: `{code}`\n"
        f"Expire le: {exp_str}",
        parse_mode='Markdown'
    )

async def admin_list_codes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Liste tous les codes actifs (commande admin)"""
    if str(update.effective_user.id) not in ADMIN_IDS:
        await update.message.reply_text("‚ùå Cette commande est r√©serv√©e aux administrateurs.")
        return

    active_codes = access_manager.list_active_codes()
    
    if not active_codes:
        await update.message.reply_text("Aucun code actif.")
        return

    message = "üìù Codes actifs :\n\n"
    for code in active_codes:
        exp_date = datetime.fromisoformat(code["expiration"])
        exp_str = exp_date.strftime("%d/%m/%Y %H:%M")
        message += f"Code: `{code['code']}`\n"
        message += f"Expire le: {exp_str}\n\n"

    await update.message.reply_text(message, parse_mode='Markdown')
    
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user
    
    # Supprimer silencieusement la commande /start si possible
    if hasattr(update, 'message') and update.message:
        try:
            await update.message.delete()
        except Exception:
            pass
    
    # Enregistrer utilisateur
    await admin_features.register_user(user)

    if admin_features.is_user_banned(user.id):
        # Supprimer tous les messages pr√©c√©dents du bot
        try:
            # Supprimer les messages stock√©s dans le context
            messages_to_delete = [
                'menu_message_id',
                'banner_message_id',
                'category_message_id',
                'last_product_message_id',
                'initial_welcome_message_id'
            ]
            
            for message_key in messages_to_delete:
                if message_key in context.user_data:
                    try:
                        await context.bot.delete_message(
                            chat_id=chat_id,
                            message_id=context.user_data[message_key]
                        )
                        del context.user_data[message_key]
                    except Exception:
                        pass
            
            # Vider les donn√©es utilisateur
            context.user_data.clear()
        except Exception as e:
            print(f"Erreur lors de la suppression des messages: {e}")
        
        return ConversationHandler.END
    # V√©rifier si l'utilisateur est autoris√©
    if not access_manager.is_authorized(user.id):
        # Supprimer l'ancien message de bienvenue s'il existe
        if 'initial_welcome_message_id' in context.user_data:
            try:
                await context.bot.delete_message(
                    chat_id=chat_id,
                    message_id=context.user_data['initial_welcome_message_id']
                )
            except Exception:
                pass
        
        # Envoyer le nouveau message de bienvenue
        welcome_msg = await context.bot.send_message(
            chat_id=chat_id,
            text="üîí Bienvenue ! Pour acc√©der au bot, veuillez entrer votre code d'acc√®s.\n\n"
                 "Si vous n'avez pas de code d'acc√®s vous pouvez en demander un en √©crivant √† @ASwissPlug"
        )

        # Sauvegarder l'ID du message de bienvenue
        context.user_data['initial_welcome_message_id'] = welcome_msg.message_id
        return WAITING_FOR_ACCESS_CODE
    
    # Supprimer les anciens messages si n√©cessaire
    if 'menu_message_id' in context.user_data:
        try:
            await context.bot.delete_message(
                chat_id=chat_id,
                message_id=context.user_data['menu_message_id']
            )
        except:
            pass
    
    # Supprimer l'ancienne banni√®re si elle existe
    if 'banner_message_id' in context.user_data:
        try:
            await context.bot.delete_message(
                chat_id=chat_id,
                message_id=context.user_data['banner_message_id']
            )
            del context.user_data['banner_message_id']
        except:
            pass
    
    # Menu standard pour tous les utilisateurs
    keyboard = [
        [InlineKeyboardButton("üìã MENU", callback_data="show_categories")]
    ]

    with open('config/config.json', 'r') as f:
        config = json.load(f)
    
    # Ajouter les boutons personnalis√©s
    for button in config.get('custom_buttons', []):
        if button['type'] == 'url':
            keyboard.append([InlineKeyboardButton(button['name'], url=button['value'])])
        elif button['type'] == 'text':
            keyboard.append([InlineKeyboardButton(button['name'], callback_data=f"custom_text_{button['id']}")])

    # D√©finir le texte de bienvenue ici, avant les boutons
    welcome_text = CONFIG.get('welcome_message', 
        "üåø <b>Bienvenue sur votre bot !</b> üåø\n\n"
        "<b>Pour changer ce message d accueil, rendez vous dans l onglet admin.</b>\n"
        "üìã Cliquez sur MENU pour voir les cat√©gories"
    )

    # Ajouter les boutons de contact et r√©seaux en colonne


    # Ajouter le bouton admin si l'utilisateur est administrateur
    if str(update.effective_user.id) in ADMIN_IDS:
        keyboard.append([InlineKeyboardButton("üîß Menu Admin", callback_data="admin")])

    try:
        # V√©rifier si une image banner est configur√©e
        if CONFIG.get('banner_image'):
            banner_message = await context.bot.send_photo(
                chat_id=chat_id,
                photo=CONFIG['banner_image']
            )
            context.user_data['banner_message_id'] = banner_message.message_id

        # Envoyer le menu d'accueil
        menu_message = await context.bot.send_message(
            chat_id=chat_id,
            text=welcome_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'  
        )
        context.user_data['menu_message_id'] = menu_message.message_id
        
    except Exception as e:
        print(f"Erreur lors du d√©marrage: {e}")
        # En cas d'erreur, envoyer au moins le menu
        menu_message = await context.bot.send_message(
            chat_id=chat_id,
            text=welcome_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        context.user_data['menu_message_id'] = menu_message.message_id
    
    return CHOOSING
    
async def show_networks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Affiche tous les r√©seaux sociaux"""
    query = update.callback_query
    await query.answer()

    keyboard = [
        [
            InlineKeyboardButton("üí≠ Tchat telegram", url="https://t.me/+dzjwvg5XKqNkZWE0")
        ],

        [
            InlineKeyboardButton("ü•î Canal potato", url="https://doudlj.org/joinchat/QwqUM5gH7Q8VqO3SnS4YwA")
        ],

        [
            InlineKeyboardButton("üîí Session", callback_data="show_info_potato")
        ],

        [
            InlineKeyboardButton("üëª Snapchat", url="https://www.snapchat.com/add/lapharmacie6933?share_id=TCLVcQ_TWlk&locale=fr-FR")
        ],
        [InlineKeyboardButton("üîô Retour", callback_data="back_to_home")]
    ]

    await query.edit_message_text(
        "üåê Voici nos r√©seaux :",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSING

async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Commande pour acc√©der au menu d'administration"""
    if str(update.effective_user.id) in ADMIN_IDS:
        # Supprimer le message /admin
        await update.message.delete()
        
        # Supprimer les anciens messages si leurs IDs sont stock√©s
        messages_to_delete = ['menu_message_id', 'banner_message_id', 'category_message_id', 
                            'last_product_message_id', 'instruction_message_id']
        
        for message_key in messages_to_delete:
            if message_key in context.user_data:
                try:
                    await context.bot.delete_message(
                        chat_id=update.effective_chat.id,
                        message_id=context.user_data[message_key]
                    )
                    del context.user_data[message_key]
                except Exception as e:
                    print(f"Erreur lors de la suppression du message {message_key}: {e}")
        
        # Envoyer la banni√®re d'abord si elle existe
        if CONFIG.get('banner_image'):
            try:
                banner_message = await context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=CONFIG['banner_image']
                )
                context.user_data['banner_message_id'] = banner_message.message_id
            except Exception as e:
                print(f"Erreur lors de l'envoi de la banni√®re: {e}")
        
        return await show_admin_menu(update, context)
    else:
        await update.message.reply_text("‚ùå Vous n'√™tes pas autoris√© √† acc√©der au menu d'administration.")
        return ConversationHandler.END

async def show_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Affiche le menu d'administration"""
    is_enabled = access_manager.is_access_code_enabled()
    status_text = "‚úÖ Activ√©" if is_enabled else "‚ùå D√©sactiv√©"
    info_status = "‚úÖ Activ√©" if CONFIG.get('info_button_enabled', True) else "‚ùå D√©sactiv√©"

    keyboard = [
        [InlineKeyboardButton("‚ûï Ajouter une cat√©gorie", callback_data="add_category")],
        [InlineKeyboardButton("‚ûï Ajouter un produit", callback_data="add_product")],
        [InlineKeyboardButton("‚ùå Supprimer une cat√©gorie", callback_data="delete_category")],
        [InlineKeyboardButton("‚ùå Supprimer un produit", callback_data="delete_product")],
        [InlineKeyboardButton("‚úèÔ∏è Modifier une cat√©gorie", callback_data="edit_category")],
        [InlineKeyboardButton("‚úèÔ∏è Modifier un produit", callback_data="edit_product")],
        [InlineKeyboardButton("üéØ G√©rer boutons accueil", callback_data="show_custom_buttons")],
        [InlineKeyboardButton("üë• G√©rer les groupes", callback_data="manage_groups")],
        [InlineKeyboardButton(f"üîí Code d'acc√®s: {status_text}", callback_data="toggle_access_code")],
        [InlineKeyboardButton("üìä Statistiques", callback_data="show_stats")],
        [InlineKeyboardButton("üõí Modifier bouton Commander", callback_data="edit_order_button")],
        [InlineKeyboardButton("üè† Modifier message d'accueil", callback_data="edit_welcome")],  
        [InlineKeyboardButton("üñºÔ∏è Modifier image banni√®re", callback_data="edit_banner_image")],
        [InlineKeyboardButton("üì¢ Gestion annonces", callback_data="manage_broadcasts")],
        [InlineKeyboardButton("üìä Gestion sondages", callback_data="manage_polls")],
        [InlineKeyboardButton("üîô Retour √† l'accueil", callback_data="back_to_home")]
    ]
    keyboard = await admin_features.add_user_buttons(keyboard)

    admin_text = (
        "üîß *Menu d'administration*\n\n"
        "S√©lectionnez une action √† effectuer :"
    )

    try:
        if update.callback_query:
            message = await update.callback_query.edit_message_text(
                admin_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            context.user_data['menu_message_id'] = message.message_id
        else:
            message = await update.message.reply_text(
                admin_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            context.user_data['menu_message_id'] = message.message_id
    except Exception as e:
        print(f"Erreur dans show_admin_menu: {e}")
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=admin_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

    return CHOOSING

async def show_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Affiche le message d'information"""
    query = update.callback_query
    await query.answer()

    info_text = CONFIG.get('info_message', 
        "‚ÑπÔ∏è Aucune information n'a √©t√© configur√©e.\n"
        "Les administrateurs peuvent ajouter des informations depuis le menu admin."
    )

    keyboard = [[InlineKeyboardButton("üîô Retour", callback_data="back_to_home")]]

    await query.edit_message_text(
        text=info_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )
    return CHOOSING

async def edit_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """D√©marre l'√©dition du message d'information"""
    query = update.callback_query
    await query.answer()

    current_info = CONFIG.get('info_message', "Aucune information configur√©e.")
    
    await query.edit_message_text(
        "üìù Envoyez le nouveau message d'information :\n"
        "Vous pouvez utiliser le formatage HTML pour mettre en forme votre texte.\n\n"
        "Message actuel :\n"
        f"{current_info}",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô Annuler", callback_data="admin")
        ]]),
        parse_mode='HTML'
    )
    return WAITING_INFO_MESSAGE

async def handle_info_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """G√®re la r√©ception du nouveau message d'information"""
    new_info = update.message.text_html if hasattr(update.message, 'text_html') else update.message.text

    # Sauvegarder le nouveau message dans la config
    CONFIG['info_message'] = new_info
    with open('config/config.json', 'w', encoding='utf-8') as f:
        json.dump(CONFIG, f, indent=4)

    # Supprimer le message de l'utilisateur et le message pr√©c√©dent
    try:
        await update.message.delete()
        await context.bot.delete_message(
            chat_id=update.effective_chat.id,
            message_id=update.message.message_id - 1
        )
    except Exception as e:
        print(f"Erreur lors de la suppression des messages : {e}")

    # Message de confirmation
    success_msg = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="‚úÖ Message d'information mis √† jour avec succ√®s !",
        parse_mode='HTML'
    )

    # Attendre 3 secondes et supprimer le message de confirmation
    await asyncio.sleep(3)
    await success_msg.delete()

    return await show_admin_menu(update, context)

async def handle_new_category_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """G√®re la modification du nom d'une cat√©gorie"""
    if str(update.message.from_user.id) not in ADMIN_IDS:
        return

    new_name = update.message.text
    old_name = context.user_data.get('category_to_edit')

    if old_name and old_name in CATALOG:
        if new_name in CATALOG:
            await update.message.reply_text(
                "‚ùå Une cat√©gorie avec ce nom existe d√©j√†.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Retour", callback_data=f"edit_cat_{old_name}")
                ]])
            )
            return EDITING_CATEGORY

        # Sauvegarder les produits
        products = CATALOG[old_name]
        del CATALOG[old_name]
        CATALOG[new_name] = products
        save_catalog(CATALOG)

        # Supprimer les messages pr√©c√©dents
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=update.message.message_id - 1
            )
            await update.message.delete()
        except:
            pass

        # Message de confirmation
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚úÖ Nom de la cat√©gorie modifi√© avec succ√®s!\n\n"
                 f"*{old_name}* ‚û°Ô∏è *{new_name}*",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Retour au menu admin", callback_data="admin")
            ]]),
            parse_mode='Markdown'
        )
        return CHOOSING

    return EDITING_CATEGORY
    
async def show_custom_buttons_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Affiche le menu de gestion des boutons personnalis√©s"""
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("‚ûï Ajouter un bouton", callback_data="add_custom_button")],
        [InlineKeyboardButton("‚ùå Supprimer un bouton", callback_data="list_buttons_delete")],
        [InlineKeyboardButton("‚úèÔ∏è Modifier un bouton", callback_data="list_buttons_edit")],
        [InlineKeyboardButton("üîô Retour", callback_data="admin")]
    ]

    await query.edit_message_text(
        "üîß Gestion des boutons personnalis√©s\n\n"
        "Choisissez une action :",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSING

async def start_add_custom_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Commence le processus d'ajout d'un bouton personnalis√©"""
    query = update.callback_query
    await query.answer()
    
    message = await query.edit_message_text(
        "‚ûï Ajout d'un nouveau bouton\n\n"
        "Envoyez le nom du bouton (exemple: 'üåü Mon Bouton') :",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô Annuler", callback_data="show_custom_buttons")
        ]])
    )
    
    # Stocker l'ID du message pour le supprimer plus tard
    context.user_data['messages_to_delete'] = [message.message_id]
    
    return WAITING_BUTTON_NAME

async def handle_order_button_config(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """G√®re la configuration du bouton Commander"""
        # Utiliser text_html pour capturer le formatage, sinon utiliser le texte normal
        new_config = update.message.text_html if hasattr(update.message, 'text_html') else update.message.text.strip()
    
        try:
            # Supprimer le message de l'utilisateur
            await update.message.delete()
        
            # Mettre √† jour la config selon le format
            if new_config.startswith(('http://', 'https://')):
                CONFIG['order_url'] = new_config
                CONFIG['order_text'] = None
                CONFIG['order_telegram'] = None
                button_type = "URL"
            # V√©rifie si c'est un pseudo Telegram (avec ou sans @)
            elif new_config.startswith('@') or not any(c in new_config for c in ' /?=&'):
                # Enlever le @ si pr√©sent
                username = new_config[1:] if new_config.startswith('@') else new_config
                CONFIG['order_telegram'] = username
                CONFIG['order_url'] = f"https://t.me/{username}"
                CONFIG['order_text'] = None
                button_type = "Telegram"
            else:
                CONFIG['order_text'] = new_config
                CONFIG['order_url'] = None
                CONFIG['order_telegram'] = None
                button_type = "texte"
            
            # Sauvegarder dans config.json
            with open('config/config.json', 'w', encoding='utf-8') as f:
                json.dump(CONFIG, f, indent=4)
        
            # Supprimer l'ancien message si possible
            if 'edit_order_button_message_id' in context.user_data:
                try:
                    await context.bot.delete_message(
                        chat_id=update.effective_chat.id,
                        message_id=context.user_data['edit_order_button_message_id']
                    )
                except:
                    pass
        
            # Message de confirmation avec le @ ajout√© si c'est un pseudo Telegram sans @
            display_value = new_config
            if button_type == "Telegram" and not new_config.startswith('@'):
                display_value = f"@{new_config}"
            
            success_message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"‚úÖ Configuration du bouton Commander mise √† jour avec succ√®s!\n\n"
                     f"Type: {button_type}\n"
                     f"Valeur: {display_value}",
                parse_mode='HTML'
            )
        
            # Attendre 3 secondes puis supprimer le message de confirmation
            await asyncio.sleep(3)
            try:
                await success_message.delete()
            except:
                pass
        
            return await show_admin_menu(update, context)
        
        except Exception as e:
            print(f"Erreur dans handle_order_button_config: {e}")
            return WAITING_ORDER_BUTTON_CONFIG

async def handle_button_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """G√®re la r√©ception du nom du bouton"""
    button_name = update.message.text
    chat_id = update.effective_chat.id
    
    # Supprimer le message de l'utilisateur
    await update.message.delete()
    
    # Supprimer tous les messages pr√©c√©dents stock√©s
    messages_to_delete = context.user_data.get('messages_to_delete', [])
    for msg_id in messages_to_delete:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except Exception as e:
            print(f"Erreur lors de la suppression du message {msg_id}: {e}")
    
    # Mode cr√©ation
    context.user_data['temp_button'] = {'name': button_name}
    
    # Envoyer le nouveau message et stocker son ID pour suppression ult√©rieure
    message = await context.bot.send_message(
        chat_id=chat_id,
        text="Maintenant, envoyez :\n\n"
             "- Une URL (commen√ßant par http:// ou https://) pour cr√©er un bouton de lien\n"
             "- Ou du texte pour cr√©er un bouton qui affichera ce texte",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô Annuler", callback_data="show_custom_buttons")
        ]])
    )
    
    # Mettre √† jour la liste des messages √† supprimer
    context.user_data['messages_to_delete'] = [message.message_id]
    
    return WAITING_BUTTON_VALUE

async def start_edit_button_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Commence l'√©dition du nom d'un bouton"""
    query = update.callback_query
    await query.answer()
    
    button_id = query.data.replace("edit_button_name_", "")
    context.user_data['editing_button_id'] = button_id
    
    with open('config/config.json', 'r') as f:
        config = json.load(f)
    
    button = next((b for b in config.get('custom_buttons', []) if b['id'] == button_id), None)
    
    message = await query.edit_message_text(
        f"‚úèÔ∏è Modification du nom du bouton\n\n"
        f"Nom actuel : {button['name']}\n\n"
        "Envoyez le nouveau nom :",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô Annuler", callback_data=f"edit_button_{button_id}")
        ]])
    )
    
    # Initialiser ou r√©initialiser la liste des messages √† supprimer
    context.user_data['messages_to_delete'] = [message.message_id]
    
    return WAITING_BUTTON_NAME

async def start_edit_button_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Commence l'√©dition de la valeur d'un bouton"""
    query = update.callback_query
    await query.answer()
    
    button_id = query.data.replace("edit_button_value_", "")
    context.user_data['editing_button_id'] = button_id
    
    with open('config/config.json', 'r') as f:
        config = json.load(f)
    
    button = next((b for b in config.get('custom_buttons', []) if b['id'] == button_id), None)
    
    message = await query.edit_message_text(
        f"‚úèÔ∏è Modification de la valeur du bouton\n\n"
        f"Valeur actuelle : {button['value']}\n\n"
        "Envoyez la nouvelle valeur :\n"
        "‚Ä¢ Pour un bouton URL : envoyez un lien commen√ßant par http:// ou https://\n"
        "‚Ä¢ Pour un bouton texte : envoyez le texte √† afficher",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô Annuler", callback_data=f"edit_button_{button_id}")
        ]])
    )
    
    # Initialiser ou r√©initialiser la liste des messages √† supprimer
    context.user_data['messages_to_delete'] = [message.message_id]
    
    return WAITING_BUTTON_VALUE

async def handle_button_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """G√®re la r√©ception de la valeur du bouton"""
    # Utiliser text_html s'il est disponible, sinon utiliser text normal
    value = update.message.text_html if hasattr(update.message, 'text_html') else update.message.text
    chat_id = update.effective_chat.id
    
    # Supprimer le message de l'utilisateur
    await update.message.delete()
    
    # Supprimer tous les messages pr√©c√©dents stock√©s
    messages_to_delete = context.user_data.get('messages_to_delete', [])
    for msg_id in messages_to_delete:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except Exception as e:
            print(f"Erreur lors de la suppression du message {msg_id}: {e}")
    
    is_url = value.startswith(('http://', 'https://'))
    
    if 'editing_button_id' in context.user_data:
        # Mode √©dition
        button_id = context.user_data['editing_button_id']
        with open('config/config.json', 'r') as f:
            config = json.load(f)
        
        for button in config.get('custom_buttons', []):
            if button['id'] == button_id:
                button['value'] = value
                button['type'] = 'url' if is_url else 'text'
                button['parse_mode'] = 'HTML' if not is_url else None  # Ajouter le parse_mode HTML si ce n'est pas une URL
                break
        
        with open('config/config.json', 'w') as f:
            json.dump(config, f, indent=4)
        
        # Envoyer le message de confirmation
        reply_message = await context.bot.send_message(
            chat_id=chat_id,
            text="‚úÖ Valeur du bouton modifi√©e avec succ√®s !",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Retour", callback_data="show_custom_buttons")
            ]])
        )
        
        # Nettoyer les donn√©es utilisateur
        context.user_data.clear()
        return CHOOSING
    
    # Mode cr√©ation
    temp_button = context.user_data.get('temp_button', {})
    
    with open('config/config.json', 'r') as f:
        config = json.load(f)
    
    if 'custom_buttons' not in config:
        config['custom_buttons'] = []
    
    button_id = f"button_{len(config['custom_buttons']) + 1}"
    new_button = {
        'id': button_id,
        'name': temp_button.get('name', 'Bouton'),
        'type': 'url' if is_url else 'text',
        'value': value,
        'parse_mode': 'HTML' if not is_url else None  # Ajouter le parse_mode HTML si ce n'est pas une URL
    }
    
    config['custom_buttons'].append(new_button)
    
    with open('config/config.json', 'w') as f:
        json.dump(config, f, indent=4)
    
    await context.bot.send_message(
        chat_id=chat_id,
        text="‚úÖ Bouton ajout√© avec succ√®s !",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô Retour", callback_data="show_custom_buttons")
        ]])
    )
    return CHOOSING

async def list_buttons_for_deletion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Liste les boutons pour suppression"""
    query = update.callback_query
    await query.answer()
    
    with open('config/config.json', 'r') as f:
        config = json.load(f)
    
    buttons = config.get('custom_buttons', [])
    if not buttons:
        await query.edit_message_text(
            "Aucun bouton personnalis√© n'existe.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Retour", callback_data="show_custom_buttons")
            ]])
        )
        return CHOOSING
    
    keyboard = []
    for button in buttons:
        keyboard.append([InlineKeyboardButton(
            f"‚ùå {button['name']}", 
            callback_data=f"delete_button_{button['id']}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô Retour", callback_data="show_custom_buttons")])
    
    await query.edit_message_text(
        "S√©lectionnez le bouton √† supprimer :",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSING

async def handle_button_deletion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """G√®re la suppression d'un bouton"""
    query = update.callback_query
    await query.answer()
    
    button_id = query.data.replace("delete_button_", "")
    
    with open('config/config.json', 'r') as f:
        config = json.load(f)
    
    config['custom_buttons'] = [b for b in config.get('custom_buttons', []) if b['id'] != button_id]
    
    with open('config/config.json', 'w') as f:
        json.dump(config, f, indent=4)
    
    await query.edit_message_text(
        "‚úÖ Bouton supprim√© avec succ√®s !",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô Retour", callback_data="show_custom_buttons")
        ]])
    )
    return CHOOSING

async def list_buttons_for_editing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Liste les boutons pour modification"""
    query = update.callback_query
    await query.answer()
    
    with open('config/config.json', 'r') as f:
        config = json.load(f)
    
    buttons = config.get('custom_buttons', [])
    if not buttons:
        await query.edit_message_text(
            "Aucun bouton personnalis√© n'existe.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Retour", callback_data="show_custom_buttons")
            ]])
        )
        return CHOOSING
    
    keyboard = []
    for button in buttons:
        keyboard.append([InlineKeyboardButton(
            f"‚úèÔ∏è {button['name']}", 
            callback_data=f"edit_button_{button['id']}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô Retour", callback_data="show_custom_buttons")])
    
    await query.edit_message_text(
        "S√©lectionnez le bouton √† modifier :",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSING

async def handle_button_editing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """G√®re la modification d'un bouton"""
    query = update.callback_query
    await query.answer()
    
    button_id = query.data.replace("edit_button_", "")
    context.user_data['editing_button_id'] = button_id
    
    with open('config/config.json', 'r') as f:
        config = json.load(f)
    
    button = next((b for b in config.get('custom_buttons', []) if b['id'] == button_id), None)
    if button:
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è Modifier le nom", callback_data=f"edit_button_name_{button_id}")],
            [InlineKeyboardButton("üîó Modifier la valeur", callback_data=f"edit_button_value_{button_id}")],
            [InlineKeyboardButton("üîô Retour", callback_data="list_buttons_edit")]
        ]
        
        await query.edit_message_text(
            f"Modification du bouton : {button['name']}\n"
            f"Type actuel : {button['type']}\n"
            f"Valeur actuelle : {button['value']}\n\n"
            "Que souhaitez-vous modifier ?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CHOOSING

async def handle_banner_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """G√®re l'ajout de l'image banni√®re"""
    if not update.message.photo:
        await update.message.reply_text("Veuillez envoyer une photo.")
        return WAITING_BANNER_IMAGE

    # Supprimer le message pr√©c√©dent
    if 'banner_msg' in context.user_data:
        await context.bot.delete_message(
            chat_id=context.user_data['banner_msg'].chat_id,
            message_id=context.user_data['banner_msg'].message_id
        )
        del context.user_data['banner_msg']

    # Obtenir l'ID du fichier de la photo
    file_id = update.message.photo[-1].file_id
    CONFIG['banner_image'] = file_id

    # Sauvegarder la configuration
    with open('config/config.json', 'w', encoding='utf-8') as f:
        json.dump(CONFIG, f, indent=4)

    # Supprimer le message contenant l'image
    await update.message.delete()

    thread_id = update.message.message_thread_id if update.message.is_topic_message else None

    # Envoyer le message de confirmation
    success_msg = await update.message.reply_text(
        "‚úÖ Image banni√®re mise √† jour avec succ√®s !",
        message_thread_id=thread_id
    )

    # Attendre 3 secondes et supprimer le message
    await asyncio.sleep(3)
    await success_msg.delete()

    # Supprimer l'ancienne banni√®re si elle existe
    if 'banner_message_id' in context.user_data:
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data['banner_message_id']
            )
        except:
            pass

    # Envoyer la nouvelle banni√®re
    if CONFIG.get('banner_image'):
        try:
            banner_message = await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=CONFIG['banner_image']
            )
            context.user_data['banner_message_id'] = banner_message.message_id
        except Exception as e:
            print(f"Erreur lors de l'envoi de la banni√®re: {e}")

    return await show_admin_menu(update, context)

async def handle_category_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """G√®re l'ajout d'une nouvelle cat√©gorie"""
    category_name = update.message.text.strip()
    user_id = update.effective_user.id
    
    # V√©rifier les groupes de l'utilisateur
    user_groups = []
    selected_group = None
    
    # R√©cup√©rer tous les groupes de l'utilisateur
    if "groups" in admin_features._access_codes:
        for group_name, members in admin_features._access_codes["groups"].items():
            if user_id in members:
                user_groups.append(group_name)

    # Si l'utilisateur est dans plusieurs groupes, lui demander de choisir
    if len(user_groups) > 1:
        keyboard = []
        for group_name in user_groups:
            keyboard.append([InlineKeyboardButton(
                group_name,
                callback_data=f"select_group_for_category_{group_name}_{category_name}"
            )])
        keyboard.append([InlineKeyboardButton("üîô Annuler", callback_data="admin")])

        await update.message.reply_text(
            "üìù Dans quel groupe voulez-vous cr√©er cette cat√©gorie ?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CHOOSING
    elif len(user_groups) == 1:
        # Si l'utilisateur n'est que dans un seul groupe
        selected_group = user_groups[0]
        category_name = f"{selected_group}_{category_name}"

    # V√©rifier si la cat√©gorie existe d√©j√†
    if category_name in CATALOG:
        await update.message.reply_text(
            "‚ùå Cette cat√©gorie existe d√©j√†.\n"
            "Veuillez choisir un autre nom :",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Annuler", callback_data="admin")
            ]])
        )
        return WAITING_CATEGORY_NAME

    # Ajouter la nouvelle cat√©gorie
    CATALOG[category_name] = []
    save_catalog(CATALOG)

    # Supprimer les messages
    try:
        await context.bot.delete_message(
            chat_id=update.effective_chat.id,
            message_id=update.message.message_id - 1
        )
        await update.message.delete()
    except Exception as e:
        print(f"Erreur lors de la suppression des messages: {e}")

    # Message de confirmation
    display_name = category_name.split("_", 1)[1] if "_" in category_name else category_name
    keyboard = [
        [InlineKeyboardButton("‚ûï Ajouter une autre cat√©gorie", callback_data="add_category")],
        [InlineKeyboardButton("üîô Retour", callback_data="admin")]
    ]
    
    message_text = (f"‚úÖ Cat√©gorie *{display_name}* cr√©√©e avec succ√®s"
                   f"{f' dans le groupe *{selected_group}*' if selected_group else ''}!")
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=message_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
    
    return CHOOSING

async def handle_product_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """G√®re l'entr√©e du nom du produit"""
    product_name = update.message.text
    category = context.user_data.get('temp_product_category')
    user_id = update.effective_user.id
    
    # V√©rifier si l'utilisateur est membre d'un groupe
    user_groups = []
    if "groups" in admin_features._access_codes:
        for group_name, members in admin_features._access_codes["groups"].items():
            if user_id in members:
                user_groups.append(group_name)

    # Si c'est une cat√©gorie publique et que l'utilisateur est dans un groupe
    if not any(category.startswith(f"{g}_") for g in admin_features._access_codes.get("groups", {}).keys()):
        if user_groups:
            # Ajouter le pr√©fixe du premier groupe de l'utilisateur au nom du produit
            product_name = f"{user_groups[0]}_{product_name}"

    # V√©rifier si la cat√©gorie existe et contient SOLD OUT
    if category in CATALOG and len(CATALOG[category]) == 1 and CATALOG[category][0].get('name') == 'SOLD OUT ! ‚ùå':
        CATALOG[category] = []  # Nettoyer la cat√©gorie SOLD OUT
        save_catalog(CATALOG)

    if category and any(p.get('name') == product_name for p in CATALOG.get(category, [])):
        await update.message.reply_text(
            "‚ùå Ce produit existe d√©j√† dans cette cat√©gorie. Veuillez choisir un autre nom:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Annuler", callback_data="cancel_add_product")
            ]])
        )
        return WAITING_PRODUCT_NAME
    
    context.user_data['temp_product_name'] = product_name
    
    # Le reste de votre code reste identique
    await context.bot.delete_message(
        chat_id=update.effective_chat.id,
        message_id=update.message.message_id - 1
    )
    
    await update.message.reply_text(
        "üí∞ Veuillez entrer le prix du produit:",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô Annuler", callback_data="cancel_add_product")
        ]])
    )
    
    await update.message.delete()
    
    return WAITING_PRODUCT_PRICE

async def handle_product_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """G√®re l'entr√©e du prix du produit"""
    # Utiliser text_html pour capturer le formatage
    price = update.message.text_html if hasattr(update.message, 'text_html') else update.message.text
    context.user_data['temp_product_price'] = price
    
    # Supprimer le message pr√©c√©dent
    await context.bot.delete_message(
        chat_id=update.effective_chat.id,
        message_id=update.message.message_id - 1
    )
    
    await update.message.reply_text(
        "üìù Veuillez entrer la description du produit:",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô Annuler", callback_data="cancel_add_product")
        ]])
    )
    
    # Supprimer le message de l'utilisateur
    await update.message.delete()
    
    return WAITING_PRODUCT_DESCRIPTION

async def handle_product_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """G√®re l'entr√©e de la description du produit"""
    # Utiliser text_html pour capturer le formatage
    description = update.message.text_html if hasattr(update.message, 'text_html') else update.message.text
    context.user_data['temp_product_description'] = description
    
    # Initialiser la liste des m√©dias
    context.user_data['temp_product_media'] = []
    
    # Supprimer le message pr√©c√©dent
    await context.bot.delete_message(
        chat_id=update.effective_chat.id,
        message_id=update.message.message_id - 1
    )
    
    # Envoyer et sauvegarder l'ID du message d'invitation
    invitation_message = await update.message.reply_text(
        "üì∏ Envoyez les photos ou vid√©os du produit (plusieurs possibles)\n"
        "Si vous ne voulez pas en envoyer, cliquez sur ignorer :",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚è© Ignorer", callback_data="skip_media")],
            [InlineKeyboardButton("üîô Annuler", callback_data="cancel_add_product")]
        ])
    )
    context.user_data['media_invitation_message_id'] = invitation_message.message_id
    
    # Supprimer le message de l'utilisateur
    await update.message.delete()
    
    return WAITING_PRODUCT_MEDIA

async def handle_product_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """G√®re l'ajout des m√©dias (photos ou vid√©os) du produit"""
    if not (update.message.photo or update.message.video):
        await update.message.reply_text("Veuillez envoyer une photo ou une vid√©o.")
        return WAITING_PRODUCT_MEDIA

    if 'temp_product_media' not in context.user_data:
        context.user_data['temp_product_media'] = []

    if 'media_count' not in context.user_data:
        context.user_data['media_count'] = 0

    if context.user_data.get('media_invitation_message_id'):
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data['media_invitation_message_id']
            )
            del context.user_data['media_invitation_message_id']
        except Exception as e:
            print(f"Erreur lors de la suppression du message d'invitation: {e}")

    if context.user_data.get('last_confirmation_message_id'):
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data['last_confirmation_message_id']
            )
        except Exception as e:
            print(f"Erreur lors de la suppression du message de confirmation: {e}")

    context.user_data['media_count'] += 1

    if update.message.photo:
        media_id = update.message.photo[-1].file_id
        media_type = 'photo'
    else:
        media_id = update.message.video.file_id
        media_type = 'video'

    new_media = {
        'media_id': media_id,
        'media_type': media_type,
        'order_index': context.user_data['media_count']
    }

    context.user_data['temp_product_media'].append(new_media)

    await update.message.delete()

    message = await update.message.reply_text(
        f"Photo/Vid√©o {context.user_data['media_count']} ajout√©e ! Cliquez sur Termin√© pour valider :",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ Termin√©", callback_data="finish_media")],
            [InlineKeyboardButton("üîô Annuler", callback_data="cancel_add_product")]
        ])
    )
    context.user_data['last_confirmation_message_id'] = message.message_id

    return WAITING_PRODUCT_MEDIA

async def finish_product_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    category = context.user_data.get('temp_product_category')
    
    if not category:
        return await show_admin_menu(update, context)

    # Pour l'√©dition d'un produit existant
    if context.user_data.get('editing_category'):
        product_name = context.user_data.get('editing_product')
        if product_name and category in CATALOG:
            for product in CATALOG[category]:
                if product['name'] == product_name:
                    product['media'] = context.user_data.get('temp_product_media', [])
                    save_catalog(CATALOG)
                    break
    else:
        # Pour un nouveau produit
        new_product = {
            'name': context.user_data.get('temp_product_name'),
            'price': context.user_data.get('temp_product_price'),
            'description': context.user_data.get('temp_product_description'),
            'media': context.user_data.get('temp_product_media', [])
        }

        # V√©rifier si la cat√©gorie est en SOLD OUT et la nettoyer si n√©cessaire
        if category in CATALOG and len(CATALOG[category]) == 1 and CATALOG[category][0].get('name') == 'SOLD OUT ! ‚ùå':
            CATALOG[category] = []  # Nettoyer la cat√©gorie SOLD OUT

        # S'assurer que la cat√©gorie existe dans CATALOG
        if category not in CATALOG:
            CATALOG[category] = []
            
        # Ajouter le nouveau produit
        CATALOG[category].append(new_product)
        save_catalog(CATALOG)

    # Nettoyer les donn√©es temporaires
    context.user_data.clear()

    # Reste du code (keyboard, etc.)
    keyboard = [
        [InlineKeyboardButton("‚ûï Ajouter une cat√©gorie", callback_data="add_category")],
        [InlineKeyboardButton("‚ûï Ajouter un produit", callback_data="add_product")],
        [InlineKeyboardButton("‚ùå Supprimer une cat√©gorie", callback_data="delete_category")],
        [InlineKeyboardButton("‚ùå Supprimer un produit", callback_data="delete_product")],
        [InlineKeyboardButton("‚úèÔ∏è Modifier une cat√©gorie", callback_data="edit_category")],
        [InlineKeyboardButton("‚úèÔ∏è Modifier un produit", callback_data="edit_product")],
        [InlineKeyboardButton("üéØ G√©rer boutons accueil", callback_data="show_custom_buttons")],
        [InlineKeyboardButton("üë• G√©rer les groupes", callback_data="manage_groups")],
        [InlineKeyboardButton(f"üîí Code d'acc√®s: {status_text}", callback_data="toggle_access_code")],
        [InlineKeyboardButton("üìä Statistiques", callback_data="show_stats")],
        [InlineKeyboardButton("üõí Modifier bouton Commander", callback_data="edit_order_button")],
        [InlineKeyboardButton("üè† Modifier message d'accueil", callback_data="edit_welcome")],  
        [InlineKeyboardButton("üñºÔ∏è Modifier image banni√®re", callback_data="edit_banner_image")],
        [InlineKeyboardButton("üì¢ Gestion annonces", callback_data="manage_broadcasts")],
        [InlineKeyboardButton("üîô Retour √† l'accueil", callback_data="back_to_home")]
    ]

    try:
        await query.message.delete()
    except:
        pass

    message = await context.bot.send_message(
        chat_id=query.message.chat_id,
        text="üîß *Menu d'administration*\n\n"
             "‚úÖ M√©dias mis √† jour avec succ√®s !\n\n"
             "S√©lectionnez une action √† effectuer :",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
    
    context.user_data['menu_message_id'] = message.message_id
    return CHOOSING

async def handle_new_value(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # D√©clarer current_catalog en dehors du try
    current_catalog = None
    
    try:
        # Supprimer le message d'invite pr√©c√©dent
        if 'last_bot_message' in context.user_data:
            try:
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=context.user_data['last_bot_message']
                )
            except Exception as e:
                print(f"Erreur lors de la suppression du message pr√©c√©dent: {e}")

        # Supprimer le message de l'utilisateur
        try:
            await update.message.delete()
        except Exception as e:
            print(f"Erreur lors de la suppression du message utilisateur: {e}")

        field = context.user_data.get('editing_field')
        category = context.user_data.get('editing_category')
        old_product_name = context.user_data.get('editing_product')
        new_value = update.message.text.strip()

        # V√©rifier que toutes les donn√©es n√©cessaires sont pr√©sentes
        if not all([field, category, old_product_name]):
            raise Exception("Donn√©es manquantes pour la modification")

        # Si on modifie le nom, g√©rer le pr√©fixe
        if field == 'name':
            current_prefix = ""
            for group in admin_features._access_codes.get("groups", {}).keys():
                if old_product_name.startswith(f"{group}_"):
                    current_prefix = f"{group}_"
                    break
            
            if current_prefix:
                new_value = f"{current_prefix}{new_value}"

        # Charger le catalogue actuel
        current_catalog = load_catalog()  # D√©plac√© ici apr√®s la v√©rification des donn√©es

        # Faire une copie des stats avant modification
        stats = current_catalog.get('stats', {}).copy()  # Utiliser .copy() pour une copie profonde

        # Trouver et modifier le produit
        product_found = False
        if category in current_catalog:
            for i, product in enumerate(current_catalog[category]):
                if isinstance(product, dict) and product.get('name') == old_product_name:
                    # Cr√©er une copie du produit et modifier la valeur
                    updated_product = product.copy()
                    updated_product[field] = new_value
                    current_catalog[category][i] = updated_product
                    product_found = True
                    print(f"Produit trouv√© et modifi√©: {json.dumps(updated_product, indent=2, ensure_ascii=False)}")
                    break

            if not product_found:
                raise Exception(f"Produit '{old_product_name}' non trouv√© dans la cat√©gorie '{category}'")
        else:
            raise Exception(f"Cat√©gorie '{category}' non trouv√©e dans le catalogue")

        # Restaurer les stats
        if 'stats' in current_catalog:
            current_catalog['stats'] = stats

        # Sauvegarder le catalogue
        save_catalog(current_catalog)

        # Mettre √† jour les deux r√©f√©rences au catalogue
        global CATALOG
        CATALOG = current_catalog
        admin_features.CATALOG = current_catalog

        # Message de confirmation
        success_message = await update.message.reply_text(
            f"‚úÖ {field.capitalize()} modifi√© avec succ√®s !"
        )
        
        # Auto-destruction du message apr√®s 3 secondes
        await asyncio.sleep(3)
        try:
            await success_message.delete()
        except Exception as e:
            print(f"Erreur lors de la suppression du message de confirmation: {e}")

        # Retourner au menu admin
        return await show_admin_menu(update, context)

    except Exception as e:
        print(f"Erreur d√©taill√©e lors de la modification: {str(e)}")
        error_message = await update.message.reply_text(
            "‚ùå Une erreur est survenue lors de la modification.\n"
            f"D√©tails: {str(e)}"
        )
        
        # Auto-destruction du message d'erreur apr√®s 3 secondes
        await asyncio.sleep(3)
        try:
            await error_message.delete()
        except Exception as e:
            print(f"Erreur lors de la suppression du message d'erreur: {e}")
            
        return await show_admin_menu(update, context)

async def handle_contact_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """G√®re la modification du contact"""
    new_value = update.message.text.strip()
    
    try:
        # Supprimer le message de l'utilisateur
        await update.message.delete()
        
        if new_value.startswith(('http://', 'https://')):
            # C'est une URL
            CONFIG['contact_url'] = new_value
            CONFIG['contact_username'] = None
            config_type = "URL"
        else:
            # C'est un pseudo Telegram
            username = new_value.replace("@", "")
            # V√©rifier le format basique d'un username Telegram
            if not bool(re.match(r'^[a-zA-Z0-9_]{5,32}$', username)):
                if 'edit_contact_message_id' in context.user_data:
                    await context.bot.edit_message_text(
                        chat_id=update.effective_chat.id,
                        message_id=context.user_data['edit_contact_message_id'],
                        text="‚ùå Format d'username Telegram invalide.\n"
                             "L'username doit contenir entre 5 et 32 caract√®res,\n"
                             "uniquement des lettres, chiffres et underscores (_).\n\n"
                             "Veuillez r√©essayer:",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô Annuler", callback_data="cancel_edit_contact")
                        ]])
                    )
                return WAITING_CONTACT_USERNAME
                
            CONFIG['contact_username'] = username
            CONFIG['contact_url'] = None
            config_type = "Pseudo Telegram"
        
        # Sauvegarder dans config.json
        with open('config/config.json', 'w', encoding='utf-8') as f:
            json.dump(CONFIG, f, indent=4)
        
        # Supprimer l'ancien message de configuration
        if 'edit_contact_message_id' in context.user_data:
            try:
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=context.user_data['edit_contact_message_id']
                )
            except:
                pass
        
        # Message de confirmation avec le @ ajout√© si c'est un pseudo Telegram sans @
        display_value = new_value
        if config_type == "Pseudo Telegram" and not new_value.startswith('@'):
            display_value = f"@{new_value}"
        
        success_message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚úÖ Configuration du contact mise √† jour avec succ√®s!\n\n"
                 f"Type: {config_type}\n"
                 f"Valeur: {display_value}",
            parse_mode='HTML'
        )
        
        # Attendre 3 secondes puis supprimer le message de confirmation
        await asyncio.sleep(3)
        try:
            await success_message.delete()
        except:
            pass
        
        return await show_admin_menu(update, context)
        
    except Exception as e:
        print(f"Erreur dans handle_contact_username: {e}")
        return WAITING_CONTACT_USERNAME

async def handle_welcome_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """G√®re la modification du message d'accueil"""
    # Utiliser text_html pour capturer le formatage
    new_message = update.message.text_html if hasattr(update.message, 'text_html') else update.message.text
    
    try:
        # Supprimer le message de l'utilisateur
        await update.message.delete()
        
        # Mettre √† jour la config
        CONFIG['welcome_message'] = new_message
        
        # Sauvegarder dans config.json
        with open('config/config.json', 'w', encoding='utf-8') as f:
            json.dump(CONFIG, f, indent=4)
        
        # Supprimer l'ancien message si possible
        if 'edit_welcome_message_id' in context.user_data:
            try:
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=context.user_data['edit_welcome_message_id']
                )
            except:
                pass
        
        # Message de confirmation
        success_message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚úÖ Message d'accueil mis √† jour avec succ√®s!\n\n"
                 f"Nouveau message :\n{new_message}",
            parse_mode='HTML'
        )
        
        # Attendre 3 secondes puis supprimer le message de confirmation
        await asyncio.sleep(3)
        try:
            await success_message.delete()
        except:
            pass
        
        return await show_admin_menu(update, context)
        
    except Exception as e:
        print(f"Erreur dans handle_welcome_message: {e}")
        return WAITING_WELCOME_MESSAGE

async def handle_normal_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Gestion des boutons normaux"""
    global paris_tz 
    query = update.callback_query
    await query.answer()
    await admin_features.register_user(update.effective_user)


    if query.data == "admin":
        if str(update.effective_user.id) in ADMIN_IDS:
            return await show_admin_menu(update, context)
        else:
            await query.edit_message_text("‚ùå Vous n'√™tes pas autoris√© √† acc√©der au menu d'administration.")
            return CHOOSING

    elif query.data == "show_info_potato":
        text = (
            "üîí <b>Voici notre ID Session pour passer commande :</b>\n\n"
            "<code>051dafdaccdb8635e039f09f2206ab3be9a05d0bb5ec55d60a699192b5a5b4854e</code>"
        )
        keyboard = [[InlineKeyboardButton("üîô Retour aux r√©seaux", callback_data="show_networks")]]
        
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        return CHOOSING

    elif query.data.startswith("custom_text_"):
        button_id = query.data.replace("custom_text_", "")
        with open('config/config.json', 'r') as f:
            config = json.load(f)
        
        button = next((b for b in config.get('custom_buttons', []) if b['id'] == button_id), None)
        if button:
            await query.edit_message_text(
                button['value'],
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Retour", callback_data="back_to_home")
                ]]),
                parse_mode='HTML'
            )
        return CHOOSING

    elif query.data == "show_custom_buttons":
        if str(update.effective_user.id) not in ADMIN_IDS:
            await query.answer("‚ùå Vous n'√™tes pas autoris√© √† acc√©der √† cette fonction.")
            return CHOOSING

        keyboard = [
            [InlineKeyboardButton("‚ûï Ajouter un bouton", callback_data="add_custom_button")],
            [InlineKeyboardButton("‚ùå Supprimer un bouton", callback_data="list_buttons_delete")],
            [InlineKeyboardButton("‚úèÔ∏è Modifier un bouton", callback_data="list_buttons_edit")],
            [InlineKeyboardButton("üîô Retour", callback_data="admin")]
        ]

        await query.edit_message_text(
            "üîß Gestion des boutons personnalis√©s\n\n"
            "Choisissez une action :",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'  # Ajout du parse_mode
        )
        return CHOOSING

    elif query.data == "add_custom_button":
        if str(update.effective_user.id) not in ADMIN_IDS:
            await query.answer("Vous n'√™tes pas autoris√© √† acc√©der √† cette fonction.")
            return CHOOSING

        await query.edit_message_text(
            "Ajout d'un nouveau bouton\n\n"
            "Envoyez le nom du bouton (exemple: 'Mon Bouton') :",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("Retour", callback_data="show_custom_buttons")
            ]])
        )
        return WAITING_BUTTON_NAME

    elif query.data == "list_buttons_delete":
        if str(update.effective_user.id) not in ADMIN_IDS:
            await query.answer("Vous n'√™tes pas autoris√© √† acc√©der √† cette fonction.")
            return CHOOSING
        
        with open('config/config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        buttons = config.get('custom_buttons', [])
        if not buttons:
            await query.edit_message_text(
                "Aucun bouton personnalise n'existe.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("Retour", callback_data="show_custom_buttons")
                ]])
            )
            return CHOOSING
        
        keyboard = []
        for button in buttons:
            keyboard.append([InlineKeyboardButton(
                f"Supprimer {button['name']}", 
                callback_data=f"delete_button_{button['id']}"
            )])
        
        keyboard.append([InlineKeyboardButton("Retour", callback_data="show_custom_buttons")])
        
        await query.edit_message_text(
            "Selectionnez le bouton a supprimer :",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CHOOSING

    elif query.data.startswith("delete_button_"):
        if str(update.effective_user.id) not in ADMIN_IDS:
            await query.answer("‚ùå Vous n'√™tes pas autoris√© √† acc√©der √† cette fonction.")
            return CHOOSING
        
        button_id = query.data.replace("delete_button_", "")
        
        with open('config/config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        config['custom_buttons'] = [b for b in config.get('custom_buttons', []) if b['id'] != button_id]
        
        with open('config/config.json', 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=4)
        
        await query.edit_message_text(
            "‚úÖ Bouton supprim√© avec succ√®s !",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Retour", callback_data="show_custom_buttons")
            ]])
        )
        return CHOOSING

    elif query.data == "list_buttons_edit":
        if str(update.effective_user.id) not in ADMIN_IDS:
            await query.answer("‚ùå Vous n'√™tes pas autoris√© √† acc√©der √† cette fonction.")
            return CHOOSING
        
        with open('config/config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        buttons = config.get('custom_buttons', [])
        if not buttons:
            await query.edit_message_text(
                "Aucun bouton personnalis√© n'existe.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Retour", callback_data="show_custom_buttons")
                ]])
            )
            return CHOOSING
        
        keyboard = []
        for button in buttons:
            keyboard.append([InlineKeyboardButton(
                f"‚úèÔ∏è {button['name']}", 
                callback_data=f"edit_button_{button['id']}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô Retour", callback_data="show_custom_buttons")])
        
        await query.edit_message_text(
            "S√©lectionnez le bouton √† modifier :",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CHOOSING

    elif query.data.startswith("edit_button_"):
        if str(update.effective_user.id) not in ADMIN_IDS:
            await query.answer("‚ùå Vous n'√™tes pas autoris√© √† acc√©der √† cette fonction.")
            return CHOOSING
        
        button_id = query.data.replace("edit_button_", "")
        context.user_data['editing_button_id'] = button_id
        
        with open('config/config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        button = next((b for b in config.get('custom_buttons', []) if b['id'] == button_id), None)
        if button:
            keyboard = [
                [InlineKeyboardButton("‚úèÔ∏è Modifier le nom", callback_data=f"edit_button_name_{button_id}")],
                [InlineKeyboardButton("üîó Modifier la valeur", callback_data=f"edit_button_value_{button_id}")],
                [InlineKeyboardButton("üîô Retour", callback_data="list_buttons_edit")]
            ]
            
            await query.edit_message_text(
                f"Modification du bouton : {button['name']}\n"
                f"Type actuel : {button['type']}\n"
                f"Valeur actuelle : {button['value']}\n\n"
                "Que souhaitez-vous modifier ?",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return CHOOSING

    elif query.data.startswith("edit_button_name_"):
        button_id = query.data.replace("edit_button_name_", "")
        context.user_data['editing_button_id'] = button_id
        context.user_data['editing_button_field'] = 'name'
        
        await query.edit_message_text(
            "‚úèÔ∏è Envoyez le nouveau nom du bouton :",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Annuler", callback_data=f"edit_button_{button_id}")
            ]])
        )
        return WAITING_BUTTON_NAME

    elif query.data.startswith("edit_button_value_"):
        button_id = query.data.replace("edit_button_value_", "")
        context.user_data['editing_button_id'] = button_id
        context.user_data['editing_button_field'] = 'value'
        
        await query.edit_message_text(
            "‚úèÔ∏è Envoyez la nouvelle valeur du bouton :\n\n"
            "‚Ä¢ Pour un bouton URL : envoyez un lien commen√ßant par http:// ou https://\n"
            "‚Ä¢ Pour un bouton texte : envoyez le texte √† afficher",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Annuler", callback_data=f"edit_button_{button_id}")
            ]])
        )
        return WAITING_BUTTON_VALUE



    elif query.data == "edit_banner_image":
            msg = await query.message.edit_text(
                "üì∏ Veuillez envoyer la nouvelle image banni√®re :",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Annuler", callback_data="cancel_edit")
                ]])
            )
            context.user_data['banner_msg'] = msg
            return WAITING_BANNER_IMAGE

    elif query.data == "manage_users":
        return await admin_features.handle_user_management(update, context)

    elif query.data == "start_broadcast":
        return await admin_features.handle_broadcast(update, context)

    elif query.data == "add_category":
        await query.message.edit_text(
            "üìù Veuillez entrer le nom de la nouvelle cat√©gorie:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Annuler", callback_data="cancel_add_category")
            ]])
        )
        return WAITING_CATEGORY_NAME

    elif query.data == "add_product":
        keyboard = []
        user_id = query.from_user.id
        user_groups = []

        # Fonction helper pour v√©rifier le SOLD OUT
        def is_category_sold_out(cat_products):
            return (len(cat_products) == 1 and 
                    isinstance(cat_products[0], dict) and 
                    cat_products[0].get('name') == 'SOLD OUT ! ‚ùå')

        # R√©cup√©rer les groupes de l'utilisateur
        if "groups" in admin_features._access_codes:
            for group_name, members in admin_features._access_codes["groups"].items():
                if user_id in members:
                    user_groups.append(group_name)

        # Filtrer les cat√©gories selon les groupes de l'utilisateur
        for category in CATALOG.keys():
            if category != 'stats':
                if user_groups:
                    # Pour les utilisateurs dans des groupes
                    # 1. Montrer les cat√©gories de leurs groupes
                    for group_name in user_groups:
                        if category.startswith(f"{group_name}_"):
                            display_name = category.replace(f"{group_name}_", "")
                            is_sold_out = is_category_sold_out(CATALOG[category])
                            keyboard.append([InlineKeyboardButton(
                                f"{display_name} {'(SOLD OUT ‚ùå)' if is_sold_out else ''}", 
                                callback_data=f"select_category_{category}"
                            )])
                            break
                    # 2. Montrer aussi les cat√©gories publiques
                    if not any(category.startswith(f"{g}_") for g in admin_features._access_codes.get("groups", {}).keys()):
                        is_sold_out = is_category_sold_out(CATALOG[category])
                        keyboard.append([InlineKeyboardButton(
                            f"{category} {'(SOLD OUT ‚ùå)' if is_sold_out else ''}", 
                            callback_data=f"select_category_{category}"
                        )])
                else:
                    # Pour les utilisateurs sans groupe, montrer uniquement les cat√©gories publiques
                    show_category = True
                    for group_name in admin_features._access_codes.get("groups", {}).keys():
                        if category.startswith(f"{group_name}_"):
                            show_category = False
                            break
                    if show_category:
                        is_sold_out = is_category_sold_out(CATALOG[category])
                        keyboard.append([InlineKeyboardButton(
                            category, 
                            callback_data=f"select_category_{category}"
                        )])

        keyboard.append([InlineKeyboardButton("üîô Annuler", callback_data="cancel_add_product")])

        await query.message.edit_text(
            "üìù S√©lectionnez la cat√©gorie pour le nouveau produit:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return SELECTING_CATEGORY

    elif query.data.startswith("select_category_"):
        # Ne traiter que si ce n'est PAS une action de suppression
        if not query.data.startswith("select_category_to_delete_"):
            category = query.data.replace("select_category_", "")
            context.user_data['temp_product_category'] = category
            
            await query.message.edit_text(
                "üìù Veuillez entrer le nom du nouveau produit:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Annuler", callback_data="cancel_add_product")
                ]])
            )
            return WAITING_PRODUCT_NAME

    elif query.data.startswith("delete_product_category_"):
        category = query.data.replace("delete_product_category_", "")
        products = CATALOG.get(category, [])
        user_id = query.from_user.id
        keyboard = []

        # R√©cup√©rer les groupes de l'utilisateur
        user_groups = []
        if "groups" in admin_features._access_codes:
            for group_name, members in admin_features._access_codes["groups"].items():
                if user_id in members:
                    user_groups.append(group_name)

        # Filtrer les produits selon les droits de l'utilisateur
        for product in products:
            if isinstance(product, dict):
                show_product = False
                product_name = product['name']

                # V√©rifier si c'est un produit de groupe
                is_group_product = any(product_name.startswith(f"{group}_") 
                                     for group in admin_features._access_codes.get("groups", {}).keys())

                if is_group_product:
                    # Pour les produits de groupe, v√©rifier si l'utilisateur est dans le bon groupe
                    for group_name in user_groups:
                        if product_name.startswith(f"{group_name}_"):
                            show_product = True
                            display_name = product_name.replace(f"{group_name}_", "")
                            keyboard.append([InlineKeyboardButton(
                                display_name,
                                callback_data=f"confirm_delete_product_{category[:10]}_{product_name[:20]}"
                            )])
                            break
                elif not user_groups:
                    # Si l'utilisateur n'est dans aucun groupe, montrer uniquement les produits publics
                    keyboard.append([InlineKeyboardButton(
                        product_name,
                        callback_data=f"confirm_delete_product_{category[:10]}_{product_name[:20]}"
                    )])

        keyboard.append([InlineKeyboardButton("üîô Annuler", callback_data="cancel_delete_product")])

        await query.message.edit_text(
            f"‚ö†Ô∏è S√©lectionnez le produit √† supprimer de *{category}* :",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        return SELECTING_PRODUCT_TO_DELETE

    elif query.data == "delete_category":
        keyboard = []
        user_id = query.from_user.id
        user_groups = []

        # R√©cup√©rer les groupes de l'utilisateur
        if "groups" in admin_features._access_codes:
            for group_name, members in admin_features._access_codes["groups"].items():
                if user_id in members:
                    user_groups.append(group_name)

        # Filtrer les cat√©gories selon les groupes de l'utilisateur
        for category in CATALOG.keys():
            if category != 'stats':
                if user_groups:
                    # Pour les utilisateurs dans des groupes, montrer UNIQUEMENT leurs cat√©gories de groupe
                    for group_name in user_groups:
                        if category.startswith(f"{group_name}_"):
                            display_name = category.replace(f"{group_name}_", "")
                            keyboard.append([InlineKeyboardButton(
                                display_name,
                                callback_data=f"confirm_delete_category_{category}"
                            )])
                            break
                else:
                    # Pour les utilisateurs sans groupe, montrer UNIQUEMENT les cat√©gories publiques
                    show_category = True
                    for group_name in admin_features._access_codes.get("groups", {}).keys():
                        if category.startswith(f"{group_name}_"):
                            show_category = False
                            break
                    if show_category:
                        keyboard.append([InlineKeyboardButton(
                            category,
                            callback_data=f"confirm_delete_category_{category}"
                        )])

        keyboard.append([InlineKeyboardButton("üîô Annuler", callback_data="admin")])

        await query.edit_message_text(
            "‚ö†Ô∏è S√©lectionnez la cat√©gorie √† supprimer:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return SELECTING_CATEGORY_TO_DELETE

    elif query.data.startswith("confirm_delete_category_"):
        category = query.data.replace("confirm_delete_category_", "")
    
        if category in CATALOG:
            # V√©rifier que l'utilisateur a le droit de supprimer cette cat√©gorie
            user_id = query.from_user.id
            can_delete = True
        
            # Si la cat√©gorie appartient √† un groupe
            for group_name in admin_features._access_codes.get("groups", {}).keys():
                if category.startswith(f"{group_name}_"):
                    # V√©rifier si l'utilisateur est dans ce groupe
                    if user_id not in admin_features._access_codes["groups"][group_name]:
                        can_delete = False
                    break

            if can_delete:
                del CATALOG[category]
                save_catalog(CATALOG)
            
                # Afficher le nom de la cat√©gorie sans le pr√©fixe du groupe
                display_name = category.split("_")[-1] if "_" in category else category
            
                keyboard = [
                    [InlineKeyboardButton("üóëÔ∏è Supprimer une autre cat√©gorie", callback_data="delete_category")],
                    [InlineKeyboardButton("üîô Retour", callback_data="admin")]
                ]
            
                await query.edit_message_text(
                    f"‚úÖ Cat√©gorie *{display_name}* supprim√©e avec succ√®s!",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
            else:
                await query.edit_message_text(
                    "‚ùå Vous n'avez pas les droits pour supprimer cette cat√©gorie.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Retour", callback_data="admin")
                    ]])
                )
        else:
            await query.edit_message_text(
                "‚ùå Cette cat√©gorie n'existe plus.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Retour", callback_data="admin")
                ]])
            )
        return CHOOSING

    elif query.data == "delete_product":
        keyboard = []
        user_id = query.from_user.id
        user_groups = []

        # R√©cup√©rer les groupes de l'utilisateur
        if "groups" in admin_features._access_codes:
            for group_name, members in admin_features._access_codes["groups"].items():
                if user_id in members:
                    user_groups.append(group_name)

        # Filtrer les cat√©gories selon les groupes de l'utilisateur
        for category in CATALOG.keys():
            if category != 'stats':
                show_category = False
                if user_groups:
                    # Pour les utilisateurs dans des groupes
                    # 1. Afficher leurs cat√©gories de groupe
                    for group_name in user_groups:
                        if category.startswith(f"{group_name}_"):
                            display_name = category.replace(f"{group_name}_", "")
                            show_category = True
                            keyboard.append([InlineKeyboardButton(
                                display_name, 
                                callback_data=f"delete_product_category_{category}"
                            )])
                            break

                    # 2. V√©rifier si la cat√©gorie contient des produits du groupe
                    if not show_category:  # Si ce n'est pas une cat√©gorie de groupe
                        has_group_products = False
                        if category in CATALOG:
                            for product in CATALOG[category]:
                                if isinstance(product, dict) and 'name' in product:
                                    for group_name in user_groups:
                                        if product['name'].startswith(f"{group_name}_"):
                                            has_group_products = True
                                            break
                                if has_group_products:
                                    break
                        
                        if has_group_products:
                            keyboard.append([InlineKeyboardButton(
                                category, 
                                callback_data=f"delete_product_category_{category}"
                            )])
                else:
                    # Pour les utilisateurs sans groupe, montrer uniquement les cat√©gories publiques
                    show_category = True
                    for group_name in admin_features._access_codes.get("groups", {}).keys():
                        if category.startswith(f"{group_name}_"):
                            show_category = False
                            break
                    if show_category:
                        keyboard.append([InlineKeyboardButton(
                            category, 
                            callback_data=f"delete_product_category_{category}"
                        )])

        keyboard.append([InlineKeyboardButton("üîô Annuler", callback_data="cancel_delete_product")])

        await query.message.edit_text(
            "‚ö†Ô∏è S√©lectionnez la cat√©gorie du produit √† supprimer:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return SELECTING_CATEGORY_TO_DELETE

    elif query.data.startswith("confirm_delete_product_"):
            try:
                # Extraire la cat√©gorie et le nom du produit
                parts = query.data.replace("confirm_delete_product_", "").split("_")
                short_category = parts[0]
                short_product = "_".join(parts[1:])  # Pour g√©rer les noms avec des underscores
                
                # Trouver la vraie cat√©gorie et le vrai produit
                category = next((cat for cat in CATALOG.keys() if cat.startswith(short_category) or short_category.startswith(cat)), None)
                if category:
                    product_name = next((p['name'] for p in CATALOG[category] if p['name'].startswith(short_product) or short_product.startswith(p['name'])), None)
                    if product_name:
                        # Cr√©er le clavier de confirmation avec les noms courts
                        keyboard = [
                            [
                                InlineKeyboardButton("‚úÖ Oui, supprimer", 
                                    callback_data=f"really_delete_product_{category[:10]}_{product_name[:20]}"),
                                InlineKeyboardButton("‚ùå Non, annuler", 
                                    callback_data="cancel_delete_product")
                            ]
                        ]
                    
                        await query.message.edit_text(
                            f"‚ö†Ô∏è *√ätes-vous s√ªr de vouloir supprimer le produit* `{product_name}` *?*\n\n"
                            f"Cette action est irr√©versible !",
                            reply_markup=InlineKeyboardMarkup(keyboard),
                            parse_mode='Markdown'
                        )
                        return SELECTING_PRODUCT_TO_DELETE

            except Exception as e:
                print(f"Erreur lors de la confirmation de suppression: {e}")
                return await show_admin_menu(update, context)

    elif query.data.startswith("really_delete_product_"):
        try:
            parts = query.data.replace("really_delete_product_", "").split("_")
            short_category = parts[0]
            short_product = "_".join(parts[1:])

            # Trouver la vraie cat√©gorie et le vrai produit
            category = next((cat for cat in CATALOG.keys() if cat.startswith(short_category) or short_category.startswith(cat)), None)
            if category:
                product_name = next((p['name'] for p in CATALOG[category] if p['name'].startswith(short_product) or short_product.startswith(p['name'])), None)
                if product_name:
                    CATALOG[category] = [p for p in CATALOG[category] if p['name'] != product_name]
                    save_catalog(CATALOG)
                    await query.message.edit_text(
                        f"‚úÖ Le produit *{product_name}* a √©t√© supprim√© avec succ√®s !",
                        parse_mode='Markdown',
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô Retour au menu", callback_data="admin")
                        ]])
                    )
            return CHOOSING

        except Exception as e:
            print(f"Erreur lors de la suppression du produit: {e}")
            return await show_admin_menu(update, context)

    elif query.data == "edit_category":
        if str(query.from_user.id) in ADMIN_IDS:
            keyboard = []
            user_id = query.from_user.id
            user_groups = []
    
            # Fonction helper pour v√©rifier le SOLD OUT
            def is_category_sold_out(cat_products):
                return (len(cat_products) == 1 and 
                        isinstance(cat_products[0], dict) and 
                        cat_products[0].get('name') == 'SOLD OUT ! ‚ùå')

            # R√©cup√©rer les groupes de l'utilisateur
            if "groups" in admin_features._access_codes:
                for group_name, members in admin_features._access_codes["groups"].items():
                    if user_id in members:
                        user_groups.append(group_name)

            # Filtrer les cat√©gories selon les groupes de l'utilisateur
            for category in CATALOG.keys():
                if category != 'stats':
                    if user_groups:
                        # Pour les utilisateurs dans des groupes, montrer uniquement leurs cat√©gories
                        for group_name in user_groups:
                            if category.startswith(f"{group_name}_"):
                                display_name = category.replace(f"{group_name}_", "")
                                is_sold_out = is_category_sold_out(CATALOG[category])
                                keyboard.append([InlineKeyboardButton(
                                    f"{display_name} {'(SOLD OUT ‚ùå)' if is_sold_out else ''}",
                                    callback_data=f"edit_cat_{category}"
                                )])
                                break
                    else:
                        # Pour les utilisateurs sans groupe, montrer uniquement les cat√©gories publiques
                        show_category = True
                        for group_name in admin_features._access_codes.get("groups", {}).keys():
                            if category.startswith(f"{group_name}_"):
                                show_category = False
                                break
                        if show_category:
                            is_sold_out = is_category_sold_out(CATALOG[category])
                            keyboard.append([InlineKeyboardButton(
                                f"{category} {'(SOLD OUT ‚ùå)' if is_sold_out else ''}",
                                callback_data=f"edit_cat_{category}"
                            )])

            keyboard.append([InlineKeyboardButton("üîô Retour", callback_data="admin")])
            await query.message.edit_text(
                "Choisissez une cat√©gorie √† modifier:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return CHOOSING

    elif query.data.startswith("edit_cat_"):
        if str(query.from_user.id) in ADMIN_IDS:
            if query.data.startswith("edit_cat_name_"):
                # Gestion de la modification du nom
                category = query.data.replace("edit_cat_name_", "")
                # Obtenir le nom d'affichage (sans pr√©fixe de groupe)
                display_name = category
                for group_name in admin_features._access_codes.get("groups", {}).keys():
                    if category.startswith(f"{group_name}_"):
                        display_name = category.replace(f"{group_name}_", "")
                        break

                context.user_data['category_to_edit'] = category
                await query.message.edit_text(
                    f"üìù *Modification du nom de cat√©gorie*\n\n"
                    f"Cat√©gorie actuelle : *{display_name}*\n\n"
                    f"‚úçÔ∏è Envoyez le nouveau nom pour cette cat√©gorie :",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Retour", callback_data=f"edit_cat_{category}")
                    ]]),
                    parse_mode='Markdown'
                )
                return WAITING_NEW_CATEGORY_NAME
            else:
                # Menu d'√©dition de cat√©gorie
                category = query.data.replace("edit_cat_", "")
                # Obtenir le nom d'affichage (sans pr√©fixe de groupe)
                display_name = category
                for group_name in admin_features._access_codes.get("groups", {}).keys():
                    if category.startswith(f"{group_name}_"):
                        display_name = category.replace(f"{group_name}_", "")
                        break

                keyboard = [
                    [InlineKeyboardButton("‚úèÔ∏è Modifier le nom", callback_data=f"edit_cat_name_{category}")],
                    [InlineKeyboardButton("‚ûï Ajouter SOLD OUT", callback_data=f"add_soldout_{category}")],
                    [InlineKeyboardButton("üîô Retour", callback_data="edit_category")]
                ]
                await query.message.edit_text(
                    f"Que voulez-vous modifier pour la cat√©gorie *{display_name}* ?",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
                return CHOOSING

    elif query.data.startswith("edit_cat_name_"):
        if str(query.from_user.id) in ADMIN_IDS:
            category = query.data.replace("edit_cat_name_", "")
            context.user_data['category_to_edit'] = category
            await query.message.edit_text(
                f"üìù *Modification du nom de cat√©gorie*\n\n"
                f"Cat√©gorie actuelle : *{category}*\n\n"
                f"‚úçÔ∏è Envoyez le nouveau nom pour cette cat√©gorie :",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Retour", callback_data=f"edit_cat_{category}")
                ]]),
                parse_mode='Markdown'
            )
            return WAITING_NEW_CATEGORY_NAME


    elif query.data.startswith("add_soldout_"):
        if str(query.from_user.id) in ADMIN_IDS:
            category = query.data.replace("add_soldout_", "")
            # Obtenir le nom d'affichage
            display_name = category
            for group_name in admin_features._access_codes.get("groups", {}).keys():
                if category.startswith(f"{group_name}_"):
                    display_name = category.replace(f"{group_name}_", "")
                    break

            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ Oui, mettre en SOLD OUT", callback_data=f"confirm_soldout_{category}"),
                    InlineKeyboardButton("‚ùå Non, annuler", callback_data=f"edit_cat_{category}")
                ]
            ]
            await query.message.edit_text(
                f"‚ö†Ô∏è *Attention!*\n\n"
                f"Vous √™tes sur le point de mettre la cat√©gorie *{display_name}* en SOLD OUT.\n\n"
                f"‚ùó *Cela supprimera tous les produits existants* dans cette cat√©gorie.\n\n"
                f"√ätes-vous s√ªr de vouloir continuer?",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            return EDITING_CATEGORY

    elif query.data.startswith("confirm_soldout_"):
        if str(query.from_user.id) in ADMIN_IDS:
            category = query.data.replace("confirm_soldout_", "")
            # Vider la cat√©gorie et ajouter le produit SOLD OUT
            CATALOG[category] = [{
                'name': 'SOLD OUT ! ‚ùå',
                'price': 'Non disponible',
                'description': 'Cette cat√©gorie est temporairement en rupture de stock.',
                'media': []
            }]
            save_catalog(CATALOG)
            await query.answer("‚úÖ SOLD OUT ajout√© avec succ√®s!")
            
            # Retourner au menu d'√©dition des cat√©gories
            keyboard = []
            # Filtrer les cat√©gories selon les groupes de l'utilisateur
            user_id = query.from_user.id
            user_groups = []
            if "groups" in admin_features._access_codes:
                for group_name, members in admin_features._access_codes["groups"].items():
                    if user_id in members:
                        user_groups.append(group_name)

            for cat in CATALOG.keys():
                if cat != 'stats':
                    show_category = False
                    display_name = cat
                
                    if user_groups:
                        # Pour les utilisateurs dans des groupes
                        for group_name in user_groups:
                            if cat.startswith(f"{group_name}_"):
                                display_name = cat.replace(f"{group_name}_", "")
                                show_category = True
                                break
                    else:
                        # Pour les utilisateurs sans groupe
                        show_category = not any(cat.startswith(f"{g}_") 
                                             for g in admin_features._access_codes.get("groups", {}).keys())

                    if show_category:
                        keyboard.append([InlineKeyboardButton(
                            f"{display_name} {'(SOLD OUT ‚ùå)' if not CATALOG[cat] or (len(CATALOG[cat]) == 1 and CATALOG[cat][0].get('name') == 'SOLD OUT ! ‚ùå') else ''}",
                            callback_data=f"edit_cat_{cat}"
                        )])

            keyboard.append([InlineKeyboardButton("üîô Retour", callback_data="admin")])
            await query.message.edit_text(
                "Choisissez une cat√©gorie √† modifier:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return EDITING_CATEGORY

    elif query.data == "toggle_access_code":
            if str(update.effective_user.id) not in ADMIN_IDS:
                await query.answer("‚ùå Vous n'√™tes pas autoris√© √† modifier ce param√®tre.")
                return CHOOSING
            
            is_enabled = access_manager.toggle_access_code()
            status = "activ√© ‚úÖ" if is_enabled else "d√©sactiv√© ‚ùå"
        
            # Afficher un message temporaire
            await query.answer(f"Le syst√®me de code d'acc√®s a √©t√© {status}")
        
            # Rafra√Æchir le menu admin
            return await show_admin_menu(update, context)

    elif query.data == "edit_order_button":
            # G√©rer l'affichage des configurations actuelles
            if CONFIG.get('order_url'):
                current_config = CONFIG['order_url']
                config_type = "URL"
            elif CONFIG.get('order_text'):
                current_config = CONFIG['order_text']
                config_type = "Texte"
            else:
                current_config = 'Non configur√©'
                config_type = "Aucune"

            message = await query.message.edit_text(
                "üõí Configuration du bouton Commander üõí\n\n"
                f"<b>Configuration actuelle</b> ({config_type}):\n"
                f"{current_config}\n\n"
                "Vous pouvez :\n"
                "‚Ä¢ Envoyer un pseudo Telegram (avec ou sans @)\n\n"
                "‚Ä¢ Envoyer un message avec formatage HTML (<b>gras</b>, <i>italique</i>, etc)\n\n"
                "‚Ä¢ Envoyer une URL (commen√ßant par http:// ou https://) pour rediriger vers un site",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Annuler", callback_data="cancel_edit_order")
                ]]),
                parse_mode='HTML'  # Ajout du support HTML
            )
            context.user_data['edit_order_button_message_id'] = message.message_id
            return WAITING_ORDER_BUTTON_CONFIG

    elif query.data == "show_order_text":
        try:
            # R√©cup√©rer le message de commande configur√©
            order_text = CONFIG.get('order_text', "Aucun message configur√©")
        
            # Extraire la cat√©gorie du message pr√©c√©dent
            category = None
            for markup_row in query.message.reply_markup.inline_keyboard:
                for button in markup_row:
                    if button.callback_data and button.callback_data.startswith("view_"):
                        category = button.callback_data.replace("view_", "")
                        break
                if category:
                    break
        
            keyboard = [[
                InlineKeyboardButton("üîô Retour aux produits", callback_data=f"view_{category}")
            ]]
        
            # Modifier le message existant au lieu d'en cr√©er un nouveau
            # Utiliser parse_mode='HTML' au lieu de 'Markdown'
            await query.message.edit_text(
                text=order_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            return CHOOSING
        
        except Exception as e:
            print(f"Erreur lors de l'affichage du message: {e}")
            await query.answer("Une erreur est survenue lors de l'affichage du message", show_alert=True)
            return CHOOSING


    elif query.data == "edit_welcome":
            current_message = CONFIG.get('welcome_message', "Message non configur√©")
        
            message = await query.message.edit_text(
                "‚úèÔ∏è Configuration du message d'accueil\n\n"
                f"Message actuel :\n{current_message}\n\n"
                "Envoyez le nouveau message d'accueil.\n"
                "Vous pouvez utiliser le formatage HTML :\n"
                "‚Ä¢ <b>texte</b> pour le gras\n"
                "‚Ä¢ <i>texte</i> pour l'italique\n"
                "‚Ä¢ <u>texte</u> pour le soulign√©",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Annuler", callback_data="cancel_edit_welcome")
                ]]),
                parse_mode='HTML'
            )
            context.user_data['edit_welcome_message_id'] = message.message_id
            return WAITING_WELCOME_MESSAGE

    elif query.data == "show_stats":
        # Configuration du fuseau horaire Paris
        paris_tz = pytz.timezone('Europe/Paris')
        utc_now = datetime.utcnow()
        paris_now = utc_now.replace(tzinfo=pytz.UTC).astimezone(paris_tz)

        # Initialisation des stats si n√©cessaire
        if 'stats' not in CATALOG:
            CATALOG['stats'] = {
                "total_views": 0,
                "category_views": {},
                "product_views": {},
                "last_updated": paris_now.strftime("%H:%M:%S"),
                "last_reset": paris_now.strftime("%Y-%m-%d")
            }
    
        # Nettoyer les stats avant l'affichage
        clean_stats()
    
        stats = CATALOG['stats']
        text = "üìä *Statistiques du catalogue*\n\n"
        text += f"üë• Vues totales: {stats.get('total_views', 0)}\n"
    
        # Conversion de l'heure en fuseau horaire Paris
        last_updated = stats.get('last_updated', 'Jamais')
        if last_updated != 'Jamais':
            try:
                if len(last_updated) > 8:  # Si format complet
                    dt = datetime.strptime(last_updated, "%Y-%m-%d %H:%M:%S")
                else:  # Si format HH:MM:SS
                    today = paris_now.strftime("%Y-%m-%d")
                    dt = datetime.strptime(f"{today} {last_updated}", "%Y-%m-%d %H:%M:%S")
            
                # Convertir en timezone Paris
                dt = dt.replace(tzinfo=pytz.UTC).astimezone(paris_tz)
                last_updated = dt.strftime("%H:%M:%S")
            except Exception as e:
                print(f"Erreur conversion heure: {e}")
            
        text += f"üïí Derni√®re mise √† jour: {last_updated}\n"
    
        if 'last_reset' in stats:
            text += f"üîÑ Derni√®re r√©initialisation: {stats.get('last_reset', 'Jamais')}\n"
        text += "\n"
    
        # Le reste du code reste identique
        text += "üìà *Vues par cat√©gorie:*\n"
        category_views = stats.get('category_views', {})
        if category_views:
            sorted_categories = sorted(category_views.items(), key=lambda x: x[1], reverse=True)
            for category, views in sorted_categories:
                if category in CATALOG:
                    text += f"- {category}: {views} vues\n"
        else:
            text += "Aucune vue enregistr√©e.\n"

        text += "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
        text += "üî• *Produits les plus populaires:*\n"
        product_views = stats.get('product_views', {})
        if product_views:
            all_products = []
            for category, products in product_views.items():
                if category in CATALOG:
                    existing_products = [p['name'] for p in CATALOG[category]]
                    for product_name, views in products.items():
                        if product_name in existing_products:
                            all_products.append((category, product_name, views))
        
            sorted_products = sorted(all_products, key=lambda x: x[2], reverse=True)[:5]
            for category, product_name, views in sorted_products:
                text += f"- {product_name} ({category}): {views} vues\n"
        else:
            text += "Aucune vue enregistr√©e sur les produits.\n"
    
        keyboard = [
            [InlineKeyboardButton("üîÑ R√©initialiser les statistiques", callback_data="confirm_reset_stats")],
            [InlineKeyboardButton("üîô Retour", callback_data="admin")]
        ]
    
        await query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

    elif query.data == "edit_contact":
            # G√©rer l'affichage de la configuration actuelle
            if CONFIG.get('contact_username'):
                current_config = f"@{CONFIG['contact_username']}"
                config_type = "Pseudo Telegram"
            elif CONFIG.get('contact_url'):  # Ajout d'une nouvelle option pour l'URL
                current_config = CONFIG['contact_url']
                config_type = "URL"
            else:
                current_config = 'Non configur√©'
                config_type = "Aucune"

            message = await query.message.edit_text(
                "üì± Configuration du contact\n\n"
                f"Configuration actuelle ({config_type}):\n"
                f"{current_config}\n\n"
                "Vous pouvez :\n"
                "‚Ä¢ Envoyer un pseudo Telegram (avec ou sans @)\n"
                "‚Ä¢ Envoyer une URL (commen√ßant par http:// ou https://) pour rediriger vers un site",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Annuler", callback_data="cancel_edit_contact")
                ]]),
                parse_mode='HTML'
            )
            context.user_data['edit_contact_message_id'] = query.message.message_id
            return WAITING_CONTACT_USERNAME

    elif query.data in ["cancel_add_category", "cancel_add_product", "cancel_delete_category", 
                        "cancel_delete_product", "cancel_edit_contact", "cancel_edit_order", "cancel_edit_welcome"]:
        return await show_admin_menu(update, context)

    elif query.data == "back_to_categories":
        if 'category_message_id' in context.user_data:
            try:
                await context.bot.edit_message_text(
                    chat_id=query.message.chat_id,
                    message_id=context.user_data['category_message_id'],
                    text=context.user_data['category_message_text'],
                    reply_markup=InlineKeyboardMarkup(context.user_data['category_message_reply_markup']),
                    parse_mode='Markdown'
                )
            except Exception as e:
                print(f"Erreur lors de la mise √† jour du message des cat√©gories: {e}")
        else:
            # Si le message n'existe pas, recr√©ez-le
            keyboard = []
            for category in CATALOG.keys():
                if category != 'stats':
                    keyboard.append([InlineKeyboardButton(category, callback_data=f"view_{category}")])

            keyboard.append([InlineKeyboardButton("üîô Retour √† l'accueil", callback_data="back_to_home")])

            await query.edit_message_text(
                "üìã *Menu*\n\n"
                "Choisissez une cat√©gorie pour voir les produits :",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )

    elif query.data == "skip_media":
        category = context.user_data.get('temp_product_category')
        if category:
            new_product = {
                'name': context.user_data.get('temp_product_name'),
                'price': context.user_data.get('temp_product_price'),
                'description': context.user_data.get('temp_product_description')
            }
            
            if category not in CATALOG:
                CATALOG[category] = []
            CATALOG[category].append(new_product)
            save_catalog(CATALOG)
            
            context.user_data.clear()
            return await show_admin_menu(update, context)

    elif query.data.startswith("product_"):
        try:
            _, nav_id = query.data.split("_", 1)
            # R√©cup√©rer les informations du produit √† partir de l'ID stock√©
            product_info = context.user_data.get(f'nav_product_{nav_id}')
        
            if not product_info:
                await query.answer("Produit non trouv√©")
                return

            category = product_info['category']
            product_name = product_info['name']
        
            # R√©cup√©rer le produit
            product = next((p for p in CATALOG[category] if p['name'] == product_name), None)

            if product:
                caption = f"üì± <b>{product['name']}</b>\n\n"
                caption += f"üí∞ <b>Prix:</b>\n{product['price']}\n\n"
                caption += f"üìù <b>Description:</b>\n{product['description']}"

                keyboard = [[
                    InlineKeyboardButton("üîô Retour √† la cat√©gorie", callback_data=f"view_{category}"),
                    InlineKeyboardButton(
                        "üõí Commander",
                        **({'url': CONFIG['order_url']} if CONFIG.get('order_url') 
                           else {'callback_data': "show_order_text"})
                    )
                ]]

                if 'media' in product and product['media']:
                    media_list = product['media']
                    media_list = sorted(media_list, key=lambda x: x.get('order_index', 0))
                    total_media = len(media_list)
                    context.user_data['current_media_index'] = 0
                    current_media = media_list[0]

                    if total_media > 1:
                        keyboard.insert(0, [
                            InlineKeyboardButton("‚¨ÖÔ∏è Pr√©c√©dent", callback_data=f"prev_{nav_id}"),
                            InlineKeyboardButton("‚û°Ô∏è Suivant", callback_data=f"next_{nav_id}")
                        ])

                    try:
                        await query.message.delete()
                    except Exception as e:
                        print(f"Erreur lors de la suppression du message: {e}")

                    try:
                        if current_media['media_type'] == 'photo':
                            try:
                                message = await context.bot.send_photo(
                                    chat_id=query.message.chat_id,
                                    photo=current_media['media_id'],
                                    caption=caption,
                                    reply_markup=InlineKeyboardMarkup(keyboard),
                                    parse_mode='HTML'
                                )
                            except Exception as e:
                                print(f"Erreur d'envoi de photo: {e}")
                                message = await context.bot.send_message(
                                    chat_id=query.message.chat_id,
                                    text=f"{caption}\n\n‚ö†Ô∏è L'image n'a pas pu √™tre charg√©e",
                                    reply_markup=InlineKeyboardMarkup(keyboard),
                                    parse_mode='HTML'
                                )
                        else:  # video
                            try:
                                message = await context.bot.send_video(
                                    chat_id=query.message.chat_id,
                                    video=current_media['media_id'],
                                    caption=caption,
                                    reply_markup=InlineKeyboardMarkup(keyboard),
                                    parse_mode='HTML'
                                )
                            except Exception as e:
                                print(f"Erreur d'envoi de vid√©o: {e}")
                                message = await context.bot.send_message(
                                    chat_id=query.message.chat_id,
                                    text=f"{caption}\n\n‚ö†Ô∏è La vid√©o n'a pas pu √™tre charg√©e",
                                    reply_markup=InlineKeyboardMarkup(keyboard),
                                    parse_mode='HTML'
                                )
                        context.user_data['last_product_message_id'] = message.message_id
                    except Exception as e:
                        print(f"Erreur lors de l'envoi du m√©dia: {e}")
                        await query.answer("Une erreur est survenue lors de l'affichage du m√©dia")

                else:
                    await query.message.edit_text(
                        text=caption,
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode='HTML'
                    )

                # Incr√©menter les stats du produit
                if 'stats' not in CATALOG:
                    CATALOG['stats'] = {
                        "total_views": 0,
                        "category_views": {},
                        "product_views": {},
                        "last_updated": datetime.now(paris_tz).strftime("%H:%M:%S")
                    }

                if 'product_views' not in CATALOG['stats']:
                    CATALOG['stats']['product_views'] = {}
                if category not in CATALOG['stats']['product_views']:
                    CATALOG['stats']['product_views'][category] = {}
                if product['name'] not in CATALOG['stats']['product_views'][category]:
                    CATALOG['stats']['product_views'][category][product['name']] = 0

                CATALOG['stats']['product_views'][category][product['name']] += 1
                CATALOG['stats']['total_views'] += 1
                CATALOG['stats']['last_updated'] = datetime.now(paris_tz).strftime("%H:%M:%S")
                save_catalog(CATALOG)

        except Exception as e:
            print(f"Erreur lors de l'affichage du produit: {e}")
            await query.answer("Une erreur est survenue")

    elif query.data.startswith("view_"):
        category = query.data.replace("view_", "")
        if category in CATALOG:
            # Initialisation des stats si n√©cessaire
            if 'stats' not in CATALOG:
                CATALOG['stats'] = {
                    "total_views": 0,
                    "category_views": {},
                    "product_views": {},
                    "last_updated": datetime.now(paris_tz).strftime("%H:%M:%S")
                }

            if 'category_views' not in CATALOG['stats']:
                CATALOG['stats']['category_views'] = {}

            if category not in CATALOG['stats']['category_views']:
                CATALOG['stats']['category_views'][category] = 0

            # Mettre √† jour les statistiques
            CATALOG['stats']['category_views'][category] += 1
            CATALOG['stats']['total_views'] += 1
            CATALOG['stats']['last_updated'] = datetime.now(paris_tz).strftime("%H:%M:%S")
            save_catalog(CATALOG)

            products = []
            user_id = query.from_user.id

            # V√©rifier si c'est une cat√©gorie de groupe
            is_group_category = False
            for group_name in admin_features._access_codes.get("groups", {}).keys():
                if category.startswith(f"{group_name}_"):
                    is_group_category = True
                    # V√©rifier si l'utilisateur est membre du groupe
                    if user_id not in admin_features._access_codes["groups"][group_name]:
                        await query.answer("‚ùå Vous n'avez pas acc√®s √† cette cat√©gorie", show_alert=True)
                        return CHOOSING
                    break

            # Filtrer les produits
            for product in CATALOG[category]:
                if is_group_category:
                    # Dans une cat√©gorie de groupe, montrer tous les produits
                    products.append(product)
                else:
                    # Dans une cat√©gorie publique, filtrer selon le groupe
                    product_name = product['name']
                    show_product = True
                    for group_name in admin_features._access_codes.get("groups", {}).keys():
                        if product_name.startswith(f"{group_name}_"):
                            if user_id not in admin_features._access_codes["groups"][group_name]:
                                show_product = False
                            break
                    if show_product:
                        products.append(product)

            # Obtenir le nom d'affichage pour la cat√©gorie (sans pr√©fixe)
            display_category_name = category
            if "groups" in admin_features._access_codes:
                for group_name, members in admin_features._access_codes["groups"].items():
                    if user_id in members and category.startswith(f"{group_name}_"):
                        display_category_name = category.replace(f"{group_name}_", "")
                        break

            # Afficher la liste des produits
            text = f"*{display_category_name}*\n\n"
            keyboard = []
            for product in products:
                # Cr√©er un ID court unique pour ce produit
                nav_id = str(abs(hash(product['name'])) % 1000)
                # Stocker les informations du produit avec cet ID
                context.user_data[f'nav_product_{nav_id}'] = {
                    'category': category,
                    'name': product['name']
                }
                # Afficher le nom sans pr√©fixe de groupe si n√©cessaire
                display_name = product['name']
                for group_name in admin_features._access_codes.get("groups", {}).keys():
                    if display_name.startswith(f"{group_name}_"):
                        display_name = display_name.replace(f"{group_name}_", "")
                        break
                keyboard.append([InlineKeyboardButton(
                    display_name,
                    callback_data=f"product_{nav_id}"
                )])

            keyboard.append([InlineKeyboardButton("üîô Retour au menu", callback_data="show_categories")])


            try:
                # Suppression du dernier message de produit (photo ou vid√©o) si existe
                if 'last_product_message_id' in context.user_data:
                    try:
                        await context.bot.delete_message(
                            chat_id=query.message.chat_id,
                            message_id=context.user_data['last_product_message_id']
                        )
                        del context.user_data['last_product_message_id']
                    except:
                        pass

                print(f"Texte du message : {text}")
                print(f"Clavier : {keyboard}")

                # √âditer le message existant au lieu de le supprimer et recr√©er
                await query.message.edit_text(
                    text=text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
    
                context.user_data['category_message_id'] = query.message.message_id
                context.user_data['category_message_text'] = text
                context.user_data['category_message_reply_markup'] = keyboard

            except Exception as e:
                print(f"Erreur lors de la mise √† jour du message des produits: {e}")
                # Si l'√©dition √©choue, on cr√©e un nouveau message
                message = await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
                context.user_data['category_message_id'] = message.message_id

            # Mettre √† jour les stats des produits seulement s'il y en a
            if products:
                if 'stats' not in CATALOG:
                    CATALOG['stats'] = {
                        "total_views": 0,
                        "category_views": {},
                        "product_views": {},
                        "last_updated": datetime.now(paris_tz).strftime("%H:%M:%S"),
                        "last_reset": datetime.now(paris_tz).strftime("%Y-%m-%d")
                    }

                if 'product_views' not in CATALOG['stats']:
                    CATALOG['stats']['product_views'] = {}
                if category not in CATALOG['stats']['product_views']:
                    CATALOG['stats']['product_views'][category] = {}

                # Mettre √† jour les stats pour chaque produit dans la cat√©gorie
                for product in products:
                    if product['name'] not in CATALOG['stats']['product_views'][category]:
                        CATALOG['stats']['product_views'][category][product['name']] = 0
                    CATALOG['stats']['product_views'][category][product['name']] += 1

                save_catalog(CATALOG)

    elif query.data.startswith(("next_", "prev_")):
        try:
            direction, nav_id = query.data.split("_")
            # R√©cup√©rer les informations du produit
            product_info = context.user_data.get(f'nav_product_{nav_id}')
            if not product_info:
                await query.answer("Navigation expir√©e")
                return
        
            category = product_info['category']
            product_name = product_info['name']
        
            # R√©cup√©rer le produit
            product = next((p for p in CATALOG[category] if p['name'] == product_name), None)

            if product and 'media' in product:
                media_list = sorted(product['media'], key=lambda x: x.get('order_index', 0))
                total_media = len(media_list)
                current_index = context.user_data.get('current_media_index', 0)

                # Navigation simple
                if direction == "next":
                    current_index = current_index + 1
                    if current_index >= total_media:
                        current_index = 0
                else:  # prev
                    current_index = current_index - 1
                    if current_index < 0:
                        current_index = total_media - 1

                context.user_data['current_media_index'] = current_index
                current_media = media_list[current_index]

                caption = f"üì± <b>{product['name']}</b>\n\n"
                caption += f"üí∞ <b>Prix:</b>\n{product['price']}\n\n"
                caption += f"üìù <b>Description:</b>\n{product['description']}"

                # Cr√©ation des boutons avec l'ID court
                keyboard = []
                if total_media > 1:
                    keyboard.append([
                        InlineKeyboardButton("‚¨ÖÔ∏è Pr√©c√©dent", callback_data=f"prev_{nav_id}"),
                        InlineKeyboardButton("‚û°Ô∏è Suivant", callback_data=f"next_{nav_id}")
                    ])
                keyboard.append([
                    InlineKeyboardButton("üîô Retour √† la cat√©gorie", callback_data=f"view_{category}"),
                    InlineKeyboardButton(
                        "üõí Commander",
                        **({'url': CONFIG.get('order_url')} if CONFIG.get('order_url') else {'callback_data': "show_order_text"})
                    )
                ])

                try:
                    await query.message.delete()
                except Exception as e:
                    print(f"Erreur lors de la suppression du message: {e}")

                try:
                    if current_media['media_type'] == 'photo':
                        try:
                            message = await context.bot.send_photo(
                                chat_id=query.message.chat_id,
                                photo=current_media['media_id'],
                                caption=caption,
                                reply_markup=InlineKeyboardMarkup(keyboard),
                                parse_mode='HTML'
                            )
                        except Exception as e:
                            print(f"Erreur d'envoi de photo: {e}")
                            message = await context.bot.send_message(
                                chat_id=query.message.chat_id,
                                text=f"{caption}\n\n‚ö†Ô∏è L'image n'a pas pu √™tre charg√©e",
                                reply_markup=InlineKeyboardMarkup(keyboard),
                                parse_mode='HTML'
                            )
                    else:  # video
                        try:
                            message = await context.bot.send_video(
                                chat_id=query.message.chat_id,
                                video=current_media['media_id'],
                                caption=caption,
                                reply_markup=InlineKeyboardMarkup(keyboard),
                                parse_mode='HTML'
                            )
                        except Exception as e:
                            print(f"Erreur d'envoi de vid√©o: {e}")
                            message = await context.bot.send_message(
                                chat_id=query.message.chat_id,
                                text=f"{caption}\n\n‚ö†Ô∏è La vid√©o n'a pas pu √™tre charg√©e",
                                reply_markup=InlineKeyboardMarkup(keyboard),
                                parse_mode='HTML'
                            )
                    context.user_data['last_product_message_id'] = message.message_id
                except Exception as e:
                    print(f"Erreur lors de l'envoi du m√©dia: {e}")
                    await query.answer("Une erreur est survenue lors de l'affichage du m√©dia")

        except Exception as e:
            print(f"Erreur lors de la navigation des m√©dias: {e}")
            await query.answer("Une erreur est survenue")

    elif query.data == "edit_product":
        keyboard = []
        user_id = query.from_user.id
        user_groups = []

        # R√©cup√©rer les groupes de l'utilisateur
        if "groups" in admin_features._access_codes:
            for group_name, members in admin_features._access_codes["groups"].items():
                if user_id in members:
                    user_groups.append(group_name)

        # Fonction helper pour v√©rifier si une cat√©gorie est en SOLD OUT
        def is_category_sold_out(cat_products):
            return (len(cat_products) == 1 and 
                    isinstance(cat_products[0], dict) and 
                    cat_products[0].get('name') == 'SOLD OUT ! ‚ùå')

        # Filtrer les cat√©gories
        for category in CATALOG.keys():
            if category != 'stats':
                is_group_category = any(category.startswith(f"{group}_") 
                                      for group in admin_features._access_codes.get("groups", {}).keys())
                
                if is_group_category:
                    # Montrer les cat√©gories du groupe de l'utilisateur
                    if user_groups:
                        for group_name in user_groups:
                            if category.startswith(f"{group_name}_"):
                                display_name = category.replace(f"{group_name}_", "")
                                is_sold_out = is_category_sold_out(CATALOG[category])
                                keyboard.append([InlineKeyboardButton(
                                    f"{display_name} {'(SOLD OUT ‚ùå)' if is_sold_out else ''}", 
                                    callback_data=f"editcat_{category}"
                                )])
                else:
                    # Montrer les cat√©gories publiques √† tout le monde
                    is_sold_out = is_category_sold_out(CATALOG[category])
                    keyboard.append([InlineKeyboardButton(
                        f"{category} {'(SOLD OUT ‚ùå)' if is_sold_out else ''}", 
                        callback_data=f"editcat_{category}"
                    )])

        keyboard.append([InlineKeyboardButton("üîô Annuler", callback_data="cancel_edit")])

        await query.message.edit_text(
            "‚úèÔ∏è S√©lectionnez la cat√©gorie du produit √† modifier:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return SELECTING_CATEGORY

    elif query.data.startswith("editp_"):
        try:
            product_id = query.data.replace("editp_", "")
            stored_data = context.user_data.get(f'callback_{product_id}')
            
            if not stored_data:
                print(f"Donn√©es non trouv√©es pour l'ID {product_id}")
                return await show_admin_menu(update, context)
            
            category = stored_data['category']
            product_name = stored_data['product_name']
            
            # V√©rifier que la cat√©gorie existe et que l'utilisateur y a acc√®s
            user_id = query.from_user.id
            has_access = False
            display_name = product_name
            group_prefix = ""
            
            # V√©rifier les permissions
            if "groups" in admin_features._access_codes:
                for group_name, members in admin_features._access_codes["groups"].items():
                    if category.startswith(f"{group_name}_"):
                        if user_id in members:
                            has_access = True
                            group_prefix = f"{group_name}_"
                            display_name = product_name.replace(group_prefix, "", 1)
                        break
                if not has_access:
                    # Si c'est une cat√©gorie publique
                    has_access = not any(category.startswith(f"{g}_") 
                                       for g in admin_features._access_codes.get("groups", {}).keys())
            else:
                has_access = True  # Si pas de groupes configur√©s

            if has_access and category in CATALOG:
                product = next((p for p in CATALOG[category] if p['name'] == product_name), None)
                if product:
                    context.user_data['editing_category'] = category
                    context.user_data['editing_product'] = product_name

                    # Construire le clavier pour l'√©dition
                    keyboard = [
                        [InlineKeyboardButton("üìù Nom", callback_data="edit_name")],
                        [InlineKeyboardButton("üí∞ Prix", callback_data="edit_price")],
                        [InlineKeyboardButton("üìù Description", callback_data="edit_desc")],
                        [InlineKeyboardButton("üì∏ M√©dias", callback_data="edit_media")],
                        [InlineKeyboardButton("üîô Annuler", callback_data="cancel_edit")]
                    ]

                    await query.message.edit_text(
                        f"‚úèÔ∏è Que souhaitez-vous modifier pour *{display_name}* ?\n"
                        "S√©lectionnez un champ √† modifier:",
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode='Markdown'
                    )
                    return EDITING_PRODUCT_FIELD
                else:
                    print(f"Produit non trouv√©: {product_name}")
            else:
                print(f"Pas d'acc√®s √† la cat√©gorie: {category}")
                await query.answer("‚ùå Vous n'avez pas acc√®s √† ce produit", show_alert=True)

            return await show_admin_menu(update, context)
            
        except Exception as e:
            print(f"Erreur dans editp_: {e}")
            traceback.print_exc()
            return await show_admin_menu(update, context)

    elif query.data.startswith("editcat_"):
        category = query.data.replace("editcat_", "")
        if category in CATALOG:
            user_id = query.from_user.id
            user_groups = []
            user_group_prefix = ""
            
            # R√©cup√©rer les groupes de l'utilisateur et son pr√©fixe
            if "groups" in admin_features._access_codes:
                for group_name, members in admin_features._access_codes["groups"].items():
                    if user_id in members:
                        user_groups.append(group_name)
                        user_group_prefix = f"{group_name}_"
                        break

            products = CATALOG[category]
            keyboard = []
            display_name = category

            # D√©termine si c'est une cat√©gorie publique
            is_public_category = not any(category.startswith(f"{group}_") 
                                       for group in admin_features._access_codes.get("groups", {}).keys())

            for product in products:
                if isinstance(product, dict):
                    product_name = product['name']
                    show_product = False

                    if is_public_category:
                        if user_groups:
                            # Dans une cat√©gorie publique avec un utilisateur de groupe
                            # Montrer uniquement les produits de son groupe
                            show_product = any(product_name.startswith(f"{group}_") for group in user_groups)
                        else:
                            # Utilisateur sans groupe : montrer uniquement les produits publics
                            show_product = not any(product_name.startswith(f"{group}_") 
                                                 for group in admin_features._access_codes.get("groups", {}).keys())
                    else:
                        # Dans une cat√©gorie de groupe, montrer les produits si l'utilisateur est dans le bon groupe
                        show_product = any(category.startswith(f"{group}_") and user_id in admin_features._access_codes["groups"][group]
                                         for group in admin_features._access_codes.get("groups", {}).keys())

                    if show_product:
                        product_id = encode_for_callback(f"{category}_{product_name}")
                        context.user_data[f'callback_{product_id}'] = {
                            'category': category,
                            'product_name': product_name,
                            'group_prefix': user_group_prefix
                        }

                        # Afficher le nom sans le pr√©fixe
                        display_product_name = product_name
                        for group in admin_features._access_codes.get("groups", {}).keys():
                            prefix = f"{group}_"
                            if display_product_name.startswith(prefix):
                                display_product_name = display_product_name[len(prefix):]
                                break

                        keyboard.append([InlineKeyboardButton(
                            display_product_name,
                            callback_data=f"editp_{product_id}"
                        )])

            if not keyboard:
                keyboard.append([InlineKeyboardButton("Aucun produit disponible", callback_data="noop")])

            keyboard.append([InlineKeyboardButton("üîô Annuler", callback_data="cancel_edit")])

            await query.message.edit_text(
                f"‚úèÔ∏è S√©lectionnez le produit √† modifier dans {display_name}:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return SELECTING_PRODUCT_TO_EDIT

    elif query.data in ["edit_name", "edit_price", "edit_desc", "edit_media"]:
        field_mapping = {
            "edit_name": "name",
            "edit_price": "price",
            "edit_desc": "description",
            "edit_media": "media"
        }
        field = field_mapping[query.data]
        context.user_data['editing_field'] = field
    
        category = context.user_data.get('editing_category')
        product_name = context.user_data.get('editing_product')
    
        # R√©cup√©rer le pr√©fixe du groupe de l'utilisateur
        user_id = query.from_user.id
        user_group_prefix = ""
        if "groups" in admin_features._access_codes:
            for group_name, members in admin_features._access_codes["groups"].items():
                if user_id in members:
                    user_group_prefix = f"{group_name}_"
                    break
        
        # Sauvegarder le pr√©fixe dans le context pour l'utiliser lors de l'√©dition
        context.user_data['group_prefix'] = user_group_prefix
    
        product = next((p for p in CATALOG[category] if p['name'] == product_name), None)
    
        if product:
            if field == 'media':
                # Stocker les informations du produit en cours d'√©dition
                context.user_data['temp_product_category'] = category
                context.user_data['temp_product_name'] = product_name
                context.user_data['temp_product_price'] = product.get('price')
                context.user_data['temp_product_description'] = product.get('description')
                context.user_data['temp_product_media'] = []
                context.user_data['media_count'] = 0
            
                # Envoyer le message d'invitation pour les m√©dias
                message = await query.message.edit_text(
                    "üì∏ Envoyez les photos ou vid√©os du produit (plusieurs possibles)\n\n"
                    "*Si vous ne voulez pas en envoyer, cliquez sur ignorer* \n\n"
                    "*üìåATTENTION : Modifier les images √©crase celles d√©j√† existantes*",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô Annuler", callback_data="cancel_edit")]
                    ]),
                    parse_mode='Markdown'
                )
                context.user_data['media_invitation_message_id'] = message.message_id
                return WAITING_PRODUCT_MEDIA
            else:
                # Pour l'√©dition du nom, afficher la valeur sans le pr√©fixe
                current_value = product.get(field, "Non d√©fini")
                if field == 'name':
                    # Enlever le pr√©fixe pour l'affichage si pr√©sent
                    for group in admin_features._access_codes.get("groups", {}).keys():
                        prefix = f"{group}_"
                        if current_value.startswith(prefix):
                            current_value = current_value[len(prefix):]
                            break

                field_names = {
                    'name': 'nom',
                    'price': 'prix',
                    'description': 'description'
                }

                # Message sp√©cial pour l'√©dition du nom avec pr√©fixe de groupe
                if field == 'name' and user_group_prefix:
                    bot_message = await query.message.edit_text(
                        f"‚úèÔ∏è Modification du {field_names.get(field, field)}\n"
                        f"Valeur actuelle : {current_value}\n\n"
                        "Envoyez la nouvelle valeur :",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô Annuler", callback_data="cancel_edit")
                        ]])
                    )
                else:
                    bot_message = await query.message.edit_text(
                        f"‚úèÔ∏è Modification du {field_names.get(field, field)}\n"
                        f"Valeur actuelle : {current_value}\n\n"
                        "Envoyez la nouvelle valeur :",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô Annuler", callback_data="cancel_edit")
                        ]])
                    )
            
                # Sauvegarder l'ID du message pour pouvoir le supprimer plus tard
                context.user_data['last_bot_message'] = bot_message.message_id
            
                return WAITING_NEW_VALUE

    elif query.data == "cancel_edit":
        return await show_admin_menu(update, context)

    elif query.data == "confirm_reset_stats":
        # R√©initialiser les statistiques
        now = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
        CATALOG['stats'] = {
            "total_views": 0,
            "category_views": {},
            "product_views": {},
            "last_updated": now.split(" ")[1],  # Juste l'heure
            "last_reset": now.split(" ")[0]  # Juste la date
        }
        save_catalog(CATALOG)
        
        # Afficher un message de confirmation
        keyboard = [[InlineKeyboardButton("üîô Retour au menu", callback_data="admin")]]
        await query.message.edit_text(
            "‚úÖ *Les statistiques ont √©t√© r√©initialis√©es avec succ√®s!*\n\n"
            f"Date de r√©initialisation : {CATALOG['stats']['last_reset']}\n\n"
            "Toutes les statistiques sont maintenant √† z√©ro.",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
               
    elif query.data == "show_categories":
        keyboard = []
        user_id = update.effective_user.id

        # V√©rifier les groupes de l'utilisateur
        user_groups = []
        if "groups" in admin_features._access_codes:
            for group_name, members in admin_features._access_codes["groups"].items():
                if user_id in members:
                    user_groups.append(group_name)

        # Fonction helper pour v√©rifier le SOLD OUT
        def is_category_sold_out(cat_products):
            return (len(cat_products) == 1 and 
                    isinstance(cat_products[0], dict) and 
                    cat_products[0].get('name') == 'SOLD OUT ! ‚ùå')

        # Cr√©er les boutons de cat√©gories
        for category in CATALOG.keys():
            if category != 'stats':
                # V√©rifier si c'est une cat√©gorie de groupe
                is_group_category = False
                category_group = None
                for group_name in admin_features._access_codes.get("groups", {}).keys():
                    if category.startswith(f"{group_name}_"):
                        is_group_category = True
                        category_group = group_name
                        break

                # D√©cider si l'utilisateur peut voir cette cat√©gorie
                show_category = False
                if is_group_category:
                    # Pour les cat√©gories de groupe, l'utilisateur doit √™tre membre du groupe
                    if user_groups and category_group in user_groups:
                        show_category = True
                        display_name = category.replace(f"{category_group}_", "")
                else:
                    # Les cat√©gories sans pr√©fixe de groupe sont publiques
                    show_category = True
                    display_name = category

                if show_category:
                    is_sold_out = is_category_sold_out(CATALOG[category])
                    display_text = f"{display_name} {'(SOLD OUT ‚ùå)' if is_sold_out else ''}"
                    keyboard.append([InlineKeyboardButton(display_text, callback_data=f"view_{category}")])

        keyboard.append([InlineKeyboardButton("üîô Retour √† l'accueil", callback_data="back_to_home")])


        try:
            message = await query.edit_message_text(
                "üìã *Menu*\n\n"
                "Choisissez une cat√©gorie pour voir les produits :",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            context.user_data['menu_message_id'] = message.message_id
        except Exception as e:
            print(f"Erreur lors de la mise √† jour du message des cat√©gories: {e}")
            message = await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="üìã *Menu*\n\n"
                     "Choisissez une cat√©gorie pour voir les produits :",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            context.user_data['menu_message_id'] = message.message_id

    elif query.data == "back_to_home":  # Ajout de cette condition ici
            chat_id = update.effective_chat.id

            # D√©finir le texte de bienvenue ici, avant les boutons
            welcome_text = CONFIG.get('welcome_message', 
                "üåø <b>Bienvenue sur votre bot !</b> üåø\n\n"
                "<b>Pour changer ce message d accueil, rendez vous dans l onglet admin.</b>\n"
                "üìã Cliquez sur MENU pour voir les cat√©gories"
            )

            # Commencer avec le bouton MENU
            keyboard = [
                [InlineKeyboardButton("üìã MENU", callback_data="show_categories")]
            ]

            # Ajouter les boutons personnalis√©s
            with open('config/config.json', 'r') as f:
                config = json.load(f)

            for button in config.get('custom_buttons', []):
                if button['type'] == 'url':
                    keyboard.append([InlineKeyboardButton(button['name'], url=button['value'])])
                elif button['type'] == 'text':
                    keyboard.append([InlineKeyboardButton(button['name'], callback_data=f"custom_text_{button['id']}")])

            # Ajouter le bouton R√©seaux avant le bouton Admin
            #keyboard.append([InlineKeyboardButton("üì± R√©seaux", callback_data="show_networks")])

            # Ajouter le bouton admin en dernier si l'utilisateur est administrateur
            if str(update.effective_user.id) in ADMIN_IDS:
                keyboard.append([InlineKeyboardButton("üîß Menu Admin", callback_data="admin")])

            await query.message.edit_text(
                text=welcome_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'  
            )
            return CHOOSING

async def edit_product_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """G√®re l'√©dition du nom d'un produit"""
        user_id = update.message.from_user.id
        new_name = update.message.text.strip()
        
        if 'editing_category' not in context.user_data or 'editing_product' not in context.user_data:
            await update.message.reply_text("‚ùå Erreur: Aucun produit en cours d'√©dition.")
            return await self.show_admin_menu(update, context)

        category = context.user_data['editing_category']
        old_name = context.user_data['editing_product']
        
        try:
            # V√©rifier si le produit actuel a un pr√©fixe de groupe
            current_prefix = ""
            for group in self._access_codes.get("groups", {}).keys():
                if old_name.startswith(f"{group}_"):
                    current_prefix = f"{group}_"
                    break

            # R√©cup√©rer le pr√©fixe du groupe de l'utilisateur si n√©cessaire
            user_group_prefix = ""
            if "groups" in self._access_codes:
                for group_name, members in self._access_codes["groups"].items():
                    if user_id in members:
                        user_group_prefix = f"{group_name}_"
                        break

            # D√©terminer le pr√©fixe √† utiliser
            prefix_to_use = current_prefix or user_group_prefix

            # Si le produit avait un pr√©fixe ou si l'utilisateur est dans un groupe,
            # ajouter le pr√©fixe appropri√© au nouveau nom
            if prefix_to_use:
                # Si le nouveau nom contient d√©j√† le pr√©fixe, ne pas le rajouter
                if not new_name.startswith(prefix_to_use):
                    new_name = f"{prefix_to_use}{new_name}"
            
            # Mettre √† jour le nom du produit
            product_found = False
            for product in self.CATALOG[category]:
                if isinstance(product, dict) and product['name'] == old_name:
                    product['name'] = new_name
                    product_found = True
                    break

            if not product_found:
                raise Exception("Produit non trouv√©")

            # Sauvegarder les modifications
            self.save_catalog(self.CATALOG)
            
            # Message de confirmation avec le nom sans pr√©fixe
            display_name = new_name
            if prefix_to_use and new_name.startswith(prefix_to_use):
                display_name = new_name[len(prefix_to_use):]
                
            await update.message.reply_text(f"‚úÖ Nom du produit modifi√© avec succ√®s en : {display_name}")
            return await self.show_admin_menu(update, context)

        except Exception as e:
            print(f"Erreur lors de la modification du nom: {e}")
            await update.message.reply_text("‚ùå Une erreur est survenue lors de la modification du nom.")
            return await self.show_admin_menu(update, context)

async def handle_new_category_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_name = update.message.text.strip()
    old_category = context.user_data.get('category_to_edit')
    user_id = update.effective_user.id
    
    # Obtenir le groupe de l'utilisateur
    user_group = None
    if "groups" in admin_features._access_codes:
        for group_name, members in admin_features._access_codes["groups"].items():
            if user_id in members and old_category.startswith(f"{group_name}_"):
                user_group = group_name
                break

    # Si c'est une cat√©gorie de groupe, conserver le pr√©fixe du groupe
    if user_group:
        new_category = f"{user_group}_{new_name}"
    else:
        new_category = new_name

    # V√©rifier si le nouveau nom existe d√©j√†
    if new_category in CATALOG:
        await update.message.reply_text(
            "‚ùå Une cat√©gorie avec ce nom existe d√©j√†.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Retour", callback_data="edit_category")
            ]])
        )
        return WAITING_NEW_CATEGORY_NAME

    # Mettre √† jour le catalogue
    CATALOG[new_category] = CATALOG.pop(old_category)
    save_catalog(CATALOG)

    # Nettoyer les messages
    try:
        await context.bot.delete_message(
            chat_id=update.effective_chat.id,
            message_id=update.message.message_id - 1
        )
        await update.message.delete()
    except Exception as e:
        print(f"Erreur lors de la suppression des messages: {e}")

    # Message de confirmation avec le nom affich√© sans le pr√©fixe du groupe
    display_name = new_name  # On affiche le nom sans le pr√©fixe
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è Modifier une autre cat√©gorie", callback_data="edit_category")],
        [InlineKeyboardButton("üîô Retour", callback_data="admin")]
    ]
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"‚úÖ Cat√©gorie renomm√©e en *{display_name}* avec succ√®s!",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
    
    return CHOOSING

async def get_file_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler temporaire pour obtenir le file_id de l'image banner"""
    if update.message.photo:
        file_id = update.message.photo[-1].file_id
        CONFIG['banner_image'] = file_id
        # Sauvegarder dans config.json
        with open('config.json', 'w', encoding='utf-8') as f:
            json.dump(CONFIG, f, indent=4)
        await update.message.reply_text(
            f"‚úÖ Image banner enregistr√©e!\nFile ID: {file_id}"
        )


    # R√©cup√©rer le chat_id et le message
    if update.callback_query:
        chat_id = update.callback_query.message.chat_id
    else:
        chat_id = update.effective_chat.id

    # Nouveau clavier simplifi√© pour l'accueil
    keyboard = [
        [InlineKeyboardButton("üìã MENU", callback_data="show_categories")]
    ]

    # Ajouter le bouton admin si l'utilisateur est administrateur
    if str(update.effective_user.id) in ADMIN_IDS:
        keyboard.append([InlineKeyboardButton("üîß Menu Admin", callback_data="admin")])

    # Configurer le bouton de contact en fonction du type (URL ou username)
    contact_button = None
    if CONFIG.get('contact_url'):
        contact_button = InlineKeyboardButton("üìû Contact", url=CONFIG['contact_url'])
    elif CONFIG.get('contact_username'):
        contact_button = InlineKeyboardButton("üìû Contact Telegram", url=f"https://t.me/{CONFIG['contact_username']}")

    # Ajouter les boutons de contact et canaux
    if contact_button:
        keyboard.extend([
            [
                contact_button,
                InlineKeyboardButton("üí≠ Canal telegram", url="https://t.me/+aHbA9_8tdTQwYThk")
            ],
            [
                InlineKeyboardButton("ü•î Contact potato", url="https://dlj199.org/christianDry547"),
                InlineKeyboardButton("üì± Instagram", url="https://www.instagram.com/christiandry.54?igsh=MWU1dXNrbXdpMzllNA%3D%3D&utm_source=qr")
            ],
            [
                InlineKeyboardButton("üåê Signal", url="https://signal.group/#CjQKIJNEETZNr9_LRMvShQbblk_NUdDyabA7e_eyUQY6-ptsEhBSpXex0cjIoOEYQ4H3D8K5"),
                InlineKeyboardButton("üëª Snapchat", url="https://snapchat.com/t/0HumwTKi")
            ]
        ])
    else:
        keyboard.extend([
            [
                InlineKeyboardButton("üí≠ Canal telegram", url="https://t.me/+aHbA9_8tdTQwYThk"),
                InlineKeyboardButton("ü•î Contact potato", url="https://dlj199.org/christianDry547")
            ],
            [
                InlineKeyboardButton("üì± Instagram", url="https://www.instagram.com/christiandry.54?igsh=MWU1dXNrbXdpMzllNA%3D%3D&utm_source=qr"),
                InlineKeyboardButton("üåê Signal", url="https://signal.group/#CjQKIJNEETZNr9_LRMvShQbblk_NUdDyabA7e_eyUQY6-ptsEhBSpXex0cjIoOEYQ4H3D8K5")
            ],
            [
                InlineKeyboardButton("üëª Snapchat", url="https://snapchat.com/t/0HumwTKi")
            ]
        ])

    try:
        if update.callback_query:
            # Si c'est un callback, on √©dite le message existant
            await update.callback_query.edit_message_text(
                text=welcome_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
        else:
            # Sinon, on envoie un nouveau message
            menu_message = await context.bot.send_message(
                chat_id=chat_id,
                text=welcome_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            context.user_data['menu_message_id'] = menu_message.message_id

    except Exception as e:
        print(f"Erreur lors du retour √† l'accueil: {e}")
        # En cas d'erreur, on essaie d'envoyer un nouveau message
        try:
            menu_message = await context.bot.send_message(
                chat_id=chat_id,
                text=welcome_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            context.user_data['menu_message_id'] = menu_message.message_id
        except Exception as e:
            print(f"Erreur critique lors du retour √† l'accueil: {e}")

    return CHOOSING

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if isinstance(context.error, NetworkError):
            print(f"Erreur r√©seau: {context.error}")
            if update and update.callback_query:
                await update.callback_query.answer("Erreur de connexion, veuillez r√©essayer.")
            await asyncio.sleep(1)  # Attendre avant de r√©essayer
        elif isinstance(context.error, TimedOut):
            print(f"Timeout: {context.error}")
            if update and update.callback_query:
                await update.callback_query.answer("La requ√™te a pris trop de temps, veuillez r√©essayer.")
            await asyncio.sleep(1)
        else:
            print(f"Une erreur s'est produite: {context.error}")
    except Exception as e:
        print(f"Erreur dans le gestionnaire d'erreurs: {e}")
       

def main():
    """Fonction principale du bot"""
    try:
        # Cr√©er l'application avec les timeouts personnalis√©s
        global admin_features
        application = (
            Application.builder()
            .token(TOKEN)
            .connect_timeout(30.0)
            .read_timeout(30.0)
            .write_timeout(30.0)
            .get_updates_read_timeout(30.0)
            .get_updates_write_timeout(30.0)
            .get_updates_connect_timeout(30.0)
            .build()
        )
        admin_features = AdminFeatures()

        # Initialiser l'access manager
        global access_manager
        access_manager = AccessManager()

        # Ajouter le gestionnaire d'erreurs
        application.add_error_handler(error_handler)

        # Gestionnaire de conversation principal
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler('start', start),
                CommandHandler('admin', admin),
                CallbackQueryHandler(admin_features.handle_vote, pattern="^vote_[0-9]+_[0-9]+$"),
                CallbackQueryHandler(handle_normal_buttons, pattern='^(show_categories|back_to_home|admin)$'),
                CallbackQueryHandler(show_custom_buttons_menu, pattern="^show_custom_buttons$"),
            ],
            states={
                CHOOSING: [
                    CallbackQueryHandler(admin_features.remove_group_user, pattern="^remove_group_user$"),
                    CallbackQueryHandler(admin_features.select_user_to_remove, pattern="^remove_from_group_"),
                    CallbackQueryHandler(admin_features.remove_user, pattern="^remove_user_"),
                    CallbackQueryHandler(admin_features.delete_group, pattern="^delete_group$"),
                    CallbackQueryHandler(admin_features.confirm_delete_group, pattern="^confirm_delete_group_"),
                    CallbackQueryHandler(admin_features.manage_groups, pattern="^manage_groups$"),
                    CallbackQueryHandler(admin_features.list_groups, pattern="^list_groups$"),
                    CallbackQueryHandler(admin_features.start_create_group, pattern="^create_group$"),
                    CallbackQueryHandler(admin_features.handle_user_management, pattern="^user_page_[0-9]+$"),
                    CallbackQueryHandler(list_buttons_for_editing, pattern="^list_buttons_edit$"),
                    CallbackQueryHandler(handle_button_editing, pattern="^edit_button_[^_]+$"),
                    CallbackQueryHandler(start_edit_button_name, pattern="^edit_button_name_"),
                    CallbackQueryHandler(start_edit_button_value, pattern="^edit_button_value_"),
                    CallbackQueryHandler(start_add_custom_button, pattern="^add_custom_button$"),
                    CallbackQueryHandler(list_buttons_for_deletion, pattern="^list_buttons_delete$"),
                    CallbackQueryHandler(handle_button_deletion, pattern="^delete_button_"),
                    CallbackQueryHandler(admin_features.manage_broadcasts, pattern="^manage_broadcasts$"),
                    CallbackQueryHandler(admin_features.edit_broadcast_content, pattern="^edit_broadcast_content_"),
                    CallbackQueryHandler(admin_features.edit_broadcast, pattern="^edit_broadcast_"),
                    CallbackQueryHandler(admin_features.resend_broadcast, pattern="^resend_broadcast_"),
                    CallbackQueryHandler(admin_features.delete_broadcast, pattern="^delete_broadcast_"),
                    CallbackQueryHandler(admin_features.handle_user_management, pattern="^manage_users$"),
                    CallbackQueryHandler(admin_features.select_group_for_user, pattern="^select_group_"),
                    CallbackQueryHandler(admin_features.show_add_user_to_group, pattern="^add_group_user$"),
                    CallbackQueryHandler(admin_features.select_group_for_category, pattern="^select_group_for_category_"),
                    CallbackQueryHandler(admin_features.manage_polls, pattern="^manage_polls$"),
                    CallbackQueryHandler(admin_features.create_poll, pattern="^create_poll$"),
                    CallbackQueryHandler(admin_features.view_active_polls, pattern="^view_active_polls$"),
                    CallbackQueryHandler(admin_features.handle_vote, pattern="^vote_[0-9]+_[0-9]+$"),
                    CallbackQueryHandler(admin_features.view_poll_details, pattern="^view_poll_"),
                    CallbackQueryHandler(admin_features.delete_poll, pattern="^delete_poll_"),
                    CallbackQueryHandler(handle_normal_buttons),
                ],
                WAITING_CATEGORY_NAME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_category_name),
                    CallbackQueryHandler(handle_normal_buttons),
                ],
                WAITING_PRODUCT_NAME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_product_name),
                    CallbackQueryHandler(handle_normal_buttons),
                ],
                WAITING_PRODUCT_PRICE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_product_price),
                    CallbackQueryHandler(handle_normal_buttons),
                ],
                WAITING_PRODUCT_DESCRIPTION: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_product_description),
                    CallbackQueryHandler(handle_normal_buttons),
                ],
                WAITING_PRODUCT_MEDIA: [
                    MessageHandler(filters.PHOTO | filters.VIDEO, handle_product_media),
                    CallbackQueryHandler(handle_normal_buttons),
                ],
                SELECTING_CATEGORY: [
                    CallbackQueryHandler(handle_normal_buttons),
                ],
                WAITING_BUTTON_NAME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_button_name),
                    CallbackQueryHandler(handle_normal_buttons)
                ],
                WAITING_BUTTON_VALUE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_button_value),
                    CallbackQueryHandler(handle_normal_buttons)
                ],
                SELECTING_CATEGORY_TO_DELETE: [
                    CallbackQueryHandler(handle_normal_buttons),
                ],
                SELECTING_PRODUCT_TO_DELETE: [
                    CallbackQueryHandler(handle_normal_buttons),
                ],
                WAITING_CONTACT_USERNAME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_contact_username),
                    CallbackQueryHandler(handle_normal_buttons),
                ],
                SELECTING_PRODUCT_TO_EDIT: [
                    CallbackQueryHandler(handle_normal_buttons),
                ],
                EDITING_PRODUCT_FIELD: [
                    CallbackQueryHandler(handle_normal_buttons),
                ],
                WAITING_NEW_VALUE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_new_value),  # Sans le self
                    CallbackQueryHandler(handle_normal_buttons)
                ],
                WAITING_BANNER_IMAGE: [
                    MessageHandler(filters.PHOTO, handle_banner_image),
                    CallbackQueryHandler(handle_normal_buttons),
                ],
                WAITING_WELCOME_MESSAGE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_welcome_message),
                    CallbackQueryHandler(handle_normal_buttons)
                ],
                WAITING_ORDER_BUTTON_CONFIG: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_order_button_config),
                    CallbackQueryHandler(handle_normal_buttons),
                ],
                WAITING_PRODUCT_MEDIA: [
                    MessageHandler(filters.PHOTO | filters.VIDEO, handle_product_media),
                    CallbackQueryHandler(finish_product_media, pattern="^finish_media$"),
                    CallbackQueryHandler(handle_normal_buttons),
                ],
                WAITING_NEW_CATEGORY_NAME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_new_category_name),
                    CallbackQueryHandler(handle_normal_buttons),
                ],
                EDITING_CATEGORY: [
                    CallbackQueryHandler(handle_normal_buttons),
                ],
                WAITING_POLL_QUESTION: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, admin_features.handle_poll_question),
                    CallbackQueryHandler(admin_features.manage_polls, pattern="^manage_polls$")
                ],
                WAITING_POLL_OPTIONS: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, admin_features.handle_poll_option),
                    CallbackQueryHandler(admin_features.finish_poll_options, pattern="^finish_poll_options$"),
                    CallbackQueryHandler(admin_features.manage_polls, pattern="^manage_polls$")
                ],
                WAITING_FOR_ACCESS_CODE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_access_code),
                    CallbackQueryHandler(start, pattern="^cancel_access$"),
                ],
                WAITING_GROUP_NAME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, admin_features.handle_group_name),
                    CallbackQueryHandler(admin_features.manage_groups, pattern="^manage_groups$")
                ],
                WAITING_GROUP_USER: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, admin_features.handle_group_user),
                    CallbackQueryHandler(handle_normal_buttons),
                ],
                WAITING_BROADCAST_MESSAGE: [
                    MessageHandler(
                        (filters.TEXT | filters.PHOTO | filters.VIDEO) & ~filters.COMMAND,
                        admin_features.send_broadcast_message
                    ),
                    CallbackQueryHandler(handle_normal_buttons)
                ],
                WAITING_BROADCAST_EDIT: [
                    MessageHandler(
                        (filters.TEXT | filters.PHOTO | filters.VIDEO) & ~filters.COMMAND,
                        admin_features.handle_broadcast_edit
                    ),
                    CallbackQueryHandler(handle_normal_buttons)
                ],
            },
            fallbacks=[
                CommandHandler('start', start),
                CommandHandler('admin', admin),
                CallbackQueryHandler(admin_features.handle_vote, pattern="^vote_[0-9]+_[0-9]+$"),
            ],
            name="main_conversation",
            persistent=False,
        )

        application.add_handler(CommandHandler("ban", admin_features.handle_ban_command))
        application.add_handler(CallbackQueryHandler(
            admin_features.show_banned_users,
            pattern="^show_banned$"
        ))
        application.add_handler(CallbackQueryHandler(
            admin_features.handle_unban_callback,
            pattern="^unban_"
        ))
        application.add_handler(CallbackQueryHandler(show_networks, pattern="^show_networks$"))
        application.add_handler(CallbackQueryHandler(start, pattern="^start_cmd$"))
        application.add_handler(CommandHandler("gencode", admin_generate_code))
        application.add_handler(CommandHandler("listecodes", admin_list_codes))
        application.add_handler(CommandHandler("group", admin_features.handle_group_command))
        application.add_handler(conv_handler)

        # D√©marrer le bot avec les param√®tres optimis√©s
        print("Bot d√©marr√©...")
        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=[Update.MESSAGE, Update.CALLBACK_QUERY],
            pool_timeout=30.0,
            read_timeout=30.0,
            write_timeout=30.0,
            connect_timeout=30.0
        )

    except Exception as e:
        print(f"Erreur lors du d√©marrage du bot: {e}")

if __name__ == '__main__':
    main()
